# 世界书生成器 项目文档

---

## 版本 v37.0.0 - “完整之言”：修复AI回复截断的根本性问题

### 2025-07-13 17:12
- **任务**: **根据用户反馈，彻底解决在自动化生成过程中，AI返回的JSON数据被意外截断的严重BUG。**
- **背景**: 用户发现，插件在进行AI内容生成时，返回的`content`字段经常不完整，导致后续的JSON解析失败，流程中断。此问题在使用SillyTavern内置聊天功能时并不存在，表明问题出在插件的API调用环节。
- **根本原因分析**:
    - 经过对 `index.js` 的代码审查，发现所有调用AI生成功能的函数（无论是调用SillyTavern内置API还是自定义API）在构建请求数据包（`payload`）时，都使用了 `max_new_tokens` 这个参数来控制最大生成长度。
    - 然而，SillyTavern的 `generateRaw` API以及大多数标准的OpenAI兼容API，期望接收的参数是 `max_tokens`。
    - 当API接收到一个不认识的 `max_new_tokens` 参数时，会忽略它，并回退到系统或模型自身的默认最大长度。这个默认值通常较小，不足以容纳插件提示词所要求生成的复杂JSON结构，从而导致了回复在达到默认上限时被强行截断。
- **解决方案 (全局参数修正)**:
    1.  **统一参数命名 (`index.js`)**:
        -   对整个 `index.js` 文件进行了全局搜索和替换。
        -   将所有函数（包括 `handleGenerateFoundation`, `handleGenerateOutline`, `doAutomatedGeneration` 等所有手动和自动生成流程）中构建 `payload` 对象时使用的 `max_new_tokens`，全部修正为标准的 **`max_tokens`**。
    2.  **兼容性保障**:
        -   在 `callCustomApi` 函数中，也同步将 `payload.max_new_tokens` 的引用改为 `payload.max_tokens`，确保无论是使用内置API还是自定义API，都能正确传递最大生成长度的限制，从而获得完整的AI回复。
- **状态**: **AI回复截断的根本性问题已修复。插件现在能够向API传递正确的参数，确保生成足够长的、完整的JSON数据，解决了流程中最严重的不稳定因素。版本号正式进入 37.0.0。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

## 版本 v36.0.0 - “不死鸟”：引入手动干预的无限重试机制

### 2025-07-13 17:05
- **任务**: **根据用户的深度容错需求，彻底重构自动化生成流程的重试逻辑，使其在面对连续失败时更具韧性。**
- **背景**: 用户反馈，尽管有自动重试，但在网络波动或AI服务不稳定的情况下，任务仍然可能因为耗尽重试次数而失败。用户希望能有一种方式在不终止整个流程的情况下，对失败的步骤进行手动干预和再次尝试。
- **解决方案 (两级重试系统)**:
    1.  **增加自动重试次数 (`index.js`)**:
        -   将 `doAutomatedGeneration` 函数内的 `maxRetries` 常量从 `3` 次大幅增加到 `10` 次，以应对偶发的、短暂的网络或API问题。
    2.  **重构 `executeTaskWithRetry` 核心函数 (`index.js`)**:
        -   **引入外部循环**: 在原有的 `for` 循环（自动重试）外部，增加了一个 `while (true)` 循环，用于处理手动重试。
        -   **引入手动重试按钮**: 当10次自动重试全部失败后，代码不再直接抛出错误并终止流程。取而代之的是：
            -   在UI的状态列表中，动态创建一个名为“在此步骤上继续重试10次”的按钮 (`#wbg-manual-retry-button`)。
            -   整个执行流程会通过一个 `new Promise` 进入暂停状态，等待用户交互。
        -   **用户驱动的流程恢复**:
            -   当用户点击该按钮后，`Promise` 会被 `resolve`，外部的 `while` 循环会继续执行，从而启动新一轮的10次自动重试。
            -   这个过程可以无限重复，直到任务成功或用户决定放弃。
    3.  **修复Eslint问题**:
        -   在最终的错误提示中，使用了 `lastError` 变量来展示具体的错误信息，解决了“变量已赋值但未使用”的警告。
- **状态**: **功能已完成。插件的自动化生成流程现在拥有了“不死鸟”般的韧性，能够通过用户的手动干预从任何失败的步骤中恢复，极大地提高了长时间、复杂任务的成功率。版本号正式进入 36.0.0。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

## 版本 v35.0.0 - “终极上帝视角”：全流程AI原始数据日志

### 2025-07-13 14:20
- **任务**: **根据用户的进阶需求，将AI返回数据的日志功能，从仅覆盖“盘古AI”扩展至插件的每一个AI调用环节，并确保无论成功或失败，都展示原始数据。**
- **背景**: 用户反馈，为了彻底排查AI返回内容的格式问题，需要一个能监控所有AI交互的“上帝视角”。之前的日志功能只在特定环节的失败时触发，无法满足深度调试的需求。
- **解决方案 (全流程日志系统)**:
    1.  **新增 `displayDebugInfo` 辅助函数 (`index.js`)**:
        -   创建了一个统一的、可重用的函数，专门负责在UI的指定调试区域（`#wbg-debug-output-container`）显示带有标题的原始文本内容。
    2.  **重构所有AI调用点 (`index.js`)**:
        -   **“盘古”任务拆解**: 修改了 `doAutomatedGeneration` 函数中的 `decomposerTask`，现在它会无条件调用 `displayDebugInfo` 来显示“盘古”AI的原始返回。
        -   **所有生成阶段 (1-4)**: 在 `doAutomatedGeneration` 的主循环中，修改了 `generationTask` 内部的AI调用逻辑。现在，每次调用生成条目的AI后，都会立即使用 `displayDebugInfo` 来显示当前阶段AI的原始返回，并附带阶段名称。
        -   **自动化“导演”角色卡生成**: 修改了 `generateAndBindCharacter` 函数，在调用AI后，立刻使用 `displayDebugInfo` 显示角色生成AI的原始返回。
        -   **手动“导演”角色卡生成**: 修改了 `handleGenerateCharacter` 函数，同样在调用AI后，立刻使用 `displayDebugInfo` 显示原始返回。
    3.  **统一逻辑**: 废除了之前“仅在失败时显示”的逻辑，现在每一次AI交互都会被忠实地记录在UI上，为用户提供了最彻底、最透明的调试工具。
- **状态**: **功能已完成。插件现在拥有了覆盖全流程的“终极上帝视角”调试模式，所有AI的输入输出都一目了然。版本号正式进入 35.0.0。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

## 版本 v30.0.0 - UI刷新最终实现：全局函数调用

### 2025-07-13 12:58
- **任务**: **根据用户提供的权威教程，彻底纠正之前的错误结论，实现稳定、可靠的UI自动刷新功能。**
- **背景**: 在经历了多次失败并错误地得出“无法刷新UI”的结论后，用户提供了一份关键的教程文档，清晰地展示了通过调用SillyTavern的全局函数来实现UI刷新的正确方法。
- **根本原因分析 (修正)**:
    - 之前的失败并非因为“无法实现”，而是因为未能正确、稳定地访问到`window`对象上的全局函数（如`getCharacters`和`select_rm_info`）。
    - 教程明确指出，只要能正确获取这些函数，就可以在插件中完美模拟SillyTavern原生创建角色后的UI刷新和高亮流程。
- **最终解决方案 (采纳教程)**:
    1.  **新增 `refreshUI` 辅助函数 (`index.js`)**:
        -   严格按照教程规范，在代码中添加了一个名为 `refreshUI` 的新函数。
        -   此函数通过 `window.getCharacters()` 和 `window.select_rm_info()` 来确保能访问到全局函数。
        -   它首先调用 `getCharacters()` 来重新从服务器拉取最新的角色列表，然后调用 `select_rm_info('char_create', newAvatarId, null)` 来刷新UI并将新创建的角色高亮显示。
    2.  **重构 `createCharacterWithWorldBook` 函数 (`index.js`)**:
        -   彻底修改了该函数在成功创建角色后的逻辑。
        -   现在，当通过API成功创建角色并获得 `newAvatarId` 后，它会**立即调用**新添加的 `refreshUI(newAvatarId)` 函数。
    3.  **增加健壮性**: 在 `refreshUI` 函数中增加了对全局函数是否存在的检查，如果获取失败，会给出明确的错误提示。
- **状态**: **UI刷新问题已得到根本性、架构级的修复。插件现在能够稳定、可靠地在创建角色后自动刷新UI并高亮新角色，完全符合用户的期望和SillyTavern的最佳实践。版本号正式进入 30.0.0，标志着此功能的最终完成。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

## 版本 v29.0.0 - UI刷新最终结论：交还用户

### 2025-07-13 12:53
- **任务**: **在穷尽所有技术手段后，得出关于UI刷新问题的最终结论。**
- **背景**: 经过对SillyTavern事件系统、API调用链、主脚本逻辑的深入分析和反复试验，所有在插件端自动刷新UI的方案（直接调用、事件驱动、模拟API请求）均告失败。
- **根本原因**:
    - **作用域隔离**: 插件的JavaScript执行环境与SillyTavern的主`script.js`环境是严格隔离的。插件无法直接调用主环境中的任何函数，包括 `getCharacters()` 或 `printCharacters()`。
    - **单向事件**: 虽然插件可以向全局发送事件，但对`script.js`的分析表明，主程序没有设置任何监听器来根据外部事件（如`CHARACTER_DUPLICATED`）自动刷新角色列表。UI刷新总是在主程序完成一项操作（如API调用）后，由其自身主动触发。
    - **API限制**: 调用`/api/characters/all`虽然能获取最新数据，但它仅仅是返回数据，并不会触发前端的重新渲染。渲染是由调用该API的**主程序代码**在`fetch`的`.then()`回调中完成的。
- **最终解决方案 (放弃与接受)**:
    1.  **移除所有刷新代码 (`index.js`)**:
        -   从 `createCharacterWithWorldBook` 函数中，彻底移除了所有尝试刷新UI的代码，包括之前模拟API调用的 `refreshUI` 函数。
    2.  **明确告知用户**:
        -   将角色创建成功后的`toastr`提示信息修改为：“角色 ‘角色名’ 创建成功！请手动刷新角色列表以查看。”
    3.  **结论**: 插件的核心职责是与后端API交互以创建数据。UI的同步刷新超出了当前SillyTavern扩展模型的能力范围，这是一个架构层面的限制。将刷新操作交还给用户是最稳定、最诚实的解决方案。
- **状态**: **UI刷新问题已得出最终结论。插件不再尝试执行其能力范围之外的操作，确保了核心功能的稳定。版本号正式进入 29.0.0，标志着对该问题的探索结束。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

## 版本 v23.0.0 - UI刷新最终方案：事件驱动

### 2025-07-13 11:56
- **任务**: **彻底解决角色创建后UI刷新失败的顽固BUG，采用SillyTavern官方推荐的事件驱动机制。**
- **背景**: 之前所有直接调用UI函数或使用`/go`命令的方案都存在缺陷。直接调用因作用域问题而失败，`/go`命令则需要在前端数据已同步的情况下才能成功，导致需要用户手动刷新。
- **根本原因**: 插件作为独立的扩展，其作用域与SillyTavern主程序隔离，无法直接访问或调用主程序的UI刷新函数（如`reloadCharacterList`）。
- **解决方案 (事件驱动)**:
    1.  **重构角色创建成功后的逻辑 (`index.js`)**:
        -   在 `createCharacterWithWorldBook` 函数中，移除了所有旧的、不稳定的刷新尝试（包括“打开角色卡”按钮）。
        -   在通过API成功创建角色并获得 `newAvatarId` 后，会**立即**向全局的 `window.eventSource` 发送一个 `CHARACTER_DUPLICATED` 事件。
    2.  **利用SillyTavern内部机制**:
        -   SillyTavern的主程序一直在监听 `CHARACTER_DUPLICATED` 事件。
        -   当它接收到我们插件发送的事件（其中包含了新角色的头像ID `newAvatar`）后，会自动触发其内部的角色列表刷新、重新渲染、并滚动到新角色的所有流程。
- **状态**: **UI刷新问题已得到根本性、架构级的修复。插件现在通过标准的事件通信与主程序交互，实现了稳定、可靠、即时的UI更新，这才是最专业、最符合SillyTavern开发规范的最终解决方案。版本号正式进入 23.0.0。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

## 版本 v22.1.2 - UI刷新与标签索引最终修复

---

## 版本 v22.1.1 - 角色卡创建API字段名最终修复

### 2025-07-13 04:21
- **任务**: **修复因向SillyTavern后端API提交了错误的字段名，而导致角色卡“第一条消息”始终为空的根本性BUG。**
- **背景**: 尽管AI能正确生成包含`first_message`的JSON，但创建出的角色卡该字段为空。经过反复排查和查阅官方教程，最终定位到问题根源。
- **根本原因**:
    - **AI生成**: AI按提示词要求，正确生成了包含`"first_message": "..."`的JSON数据。
    - **代码逻辑**: 代码正确解析了该JSON，获取了`charData.first_message`的值。
    - **API调用错误**: 在构建`FormData`对象以提交给`/api/characters/create`端点时，我错误地使用了`formData.append('first_message', ...)`。
    - **正确规范**: 官方教程明确指出，后端API期望接收的字段名是缩写形式的 **`first_mes`**。
- **解决方案 (API调用修复)**:
    1.  **修正`createCharacterWithWorldBook`函数 (`index.js`)**:
        -   将函数中构建`FormData`的代码行 `formData.append('first_message', ...)`，修正为`formData.append('first_mes', ...)`。
    2.  **保持提示词不变**: 角色生成提示词 (`character-generator-prompt.txt`) 无需修改，其生成的`first_message`字段是正确的，并在代码中被正确处理。
- **状态**: **角色卡创建流程中的“第一条消息”丢失BUG已得到根本性修复。现在，从AI生成到API提交的整个数据链条完全符合SillyTavern的规范，所有字段都能被正确保存。版本号正式进入 22.1.1。**
- **下一步**: **提醒用户进行最终测试，并手动上传至Github。**

---

---

## 版本 v21.0.0 - 命名一致性与提示词最终优化

### 2025-07-13 02:22
- **任务**: **强制角色卡名称与世界书名称一致，并优化提示词逻辑，确保数据同步和AI任务的清晰化。**
- **背景**: 为了确保最终生成的数据一致性和可管理性，需要让“导演”角色卡的名称与其绑定的世界书名称完全相同。同时，需要简化和修正提示词，避免不必要的混淆。
- **解决方案 (代码与提示词双重优化)**:
    1.  **强制命名 (`index.js`)**:
        -   修改了 `generateAndBindCharacter` (用于自动流程) 和 `handleCreateCharacter` (用于手动流程) 两个函数。
        -   现在，在从AI获取角色数据JSON并解析后，会立即执行 `characterData.name = bookName;` 这行代码。
        -   此操作会强制覆盖AI生成的任何名称，确保最终创建的角色卡名称与当前工作的世界书名称绝对一致。
    2.  **提示词修正 (`character-generator-prompt.txt`)**:
        -   从角色生成提示词的JSON范例和硬性要求中，彻底移除了 `name` 字段。
        -   这避免了AI去生成一个最终会被代码覆盖掉的名称，简化了AI的任务，使其能更专注于生成核心内容（如描述、第一条消息等）。
    3.  **提示词逻辑修复 (`index.js`)**:
        -   修复了 `generateAndBindCharacter` 函数中一个遗漏的bug。之前，它在调用AI时没有为 `{{user_prompt}}` 占位符提供内容。
        -   现在，它会传递一个默认的用户要求（“请根据世界书内容，生成一个合适的导演角色。”），确保了提示词的完整性和逻辑的健壮性。
- **状态**: **角色卡与世界书的绑定逻辑已达到最终的、最健壮的形态。命名不再有任何歧义，流程更加清晰可靠。版本号正式进入 21.0.0。**
- **下一步**: **提醒用户进行全面测试，并手动上传至Github。**

---

## 版本 v20.0.0 - 功能闭环：集成“角色卡自动生成与绑定”

### 2025-07-13 02:15
- **任务**: **为插件增加最终的核心功能：在世界书创建完成后，能够自动或手动为其生成一个配套的“导演”角色卡，并将两者绑定，形成完整的创作闭环。**
- **背景**: 用户指出，单纯生成世界书只是完成了工作的一半，一个能利用该世界书进行故事叙述的角色卡是必不可少的。
- **解决方案 (系统级功能整合)**:
    1.  **创建“导演”角色生成器 (`character-generator-prompt.txt`)**:
        -   设计并实现了一个全新的、高度专业化的AI提示词。
        -   该提示词的核心任务是接收一个完整的世界书作为上下文，然后生成一个抽象的“游戏导演”或“故事主持人”角色。
        -   **【导演角色铁律】**: 强制AI生成的角色描述、人格等字段，都是关于其【如何】推进剧情的元描述，而非一个具体NPC。
        -   **【游戏介绍铁律】**: 强制AI将角色的`first_message`字段创作**成一段超过200字的、引人入胜的【游戏介绍】和【开局故事】**。
    2.  **实现核心角色创建逻辑 (`index.js`)**:
        -   根据官方教程，编写了健壮的 `createCharacterWithWorldBook` 函数。该函数能够以编程方式构建一个包含所有角色数据和目标世界书名称的 `FormData` 对象，并将其提交到 `/api/characters/create` 端点，最后调用 `select_rm_info` 刷新UI。
    3.  **集成到“全自动生成”流程 (`index.js`)**:
        -   在 `doAutomatedGeneration` 函数的末尾，增加了对新功能 `generateAndBindCharacter` 的调用。
        -   现在，当自动化流程成功创建世界书后，会**无缝地、自动地**调用AI，使用刚刚生成的世界书内容作为上下文，来创建配套的导演角色卡并完成绑定。
    4.  **新增“手动生成”第五阶段 (`popup.html` & `index.js`)**:
        -   为手动模式增加了全新的“第五阶段：创建配套角色卡”。
        -   该阶段提供了完整的“生成-审核-创建”UI，允许用户在手动完成世界书后，输入自己的要求，调用AI生成角色数据，并在审核后一键创建角色卡并绑定当前的世界书。
- **状态**: **插件的核心功能已形成完美闭环。它现在不仅是一个世界书生成器，更是一个能一站式产出“世界观+配套导演角色”的完整解决方案。版本号正式进入 20.0.0。**
- **下一步**: **提醒用户进行全面测试，并手动上传至Github。**

---

## 版本 v19.1.0 - 角色卡创建流程健壮性修复

### 2025-07-13 01:58
- **任务**: **修复因调用错误的API和函数而导致的“配套角色卡创建失败”的系列BUG。**
- **背景**: 用户反馈，在全自动生成流程的最后一步，角色卡创建流程会因连续的JS错误而中断，导致无法自动创建并绑定“导演”角色卡。
- **解决方案 (多点修复)**:
    1.  **修复API调用错误**:
        -   在 `generateAndBindCharacter` 函数中，将对一个不存在的 `tavernHelperApi.fetchExtensionFile` 函数的调用，修正为标准的、基于 `fetch` 的 `$.get()` 方法来异步加载提示词文件。这确保了与项目中其他文件加载逻辑的一致性和正确性。
    2.  **修复函数作用域错误**:
        -   在 `createCharacterWithWorldBook` 函数中，修正了对 `select_rm_info` 函数的调用方式。之前错误地尝试从 `SillyTavern.getContext()` 中获取它。
        -   现在改为直接调用全局作用域下的 `select_rm_info` 函数，因为该函数由主 `script.js` 提供。
        -   同时，为了遵循最佳实践并消除Eslint报错，在 `index.js` 文件顶部明确声明了 `const select_rm_info = window.select_rm_info;`，使其成为一个作用域清晰的常量。
- **状态**: **角色卡创建流程中的所有已知BUG已全部修复。现在全自动生成流程可以完整、健壮地执行，包括最后创建并绑定配套角色卡，并能正确刷新UI。版本号更新至 19.1.0。**
- **下一步**: **提醒用户进行全面测试，并手动上传至Github。**

---

## 过往版本历史 (v19.0.0之前)

### v18.x - v15.x (健壮性与重试机制)
- **核心**: 引入并完善了自动化任务的容错与重试机制，从简单的重试升级为可精准重试失败核心任务、甚至重试整个阶段的健壮架构，并对整体代码质量进行了全面打磨。
- **v18.1.0**: 修复UI逻辑，分离手动与自动配置。
- **v18.0.0**: 全面代码审查与质量打磨。
- **v17.0.0**: 升级为“全阶段”重试。
- **v16.0.0**: 重构为“精准重试”。
- **v15.x**: 引入基础的容错与重试机制。

### v14.x - v11.x (自动化流程增强)
- **核心**: 新增并完善了“全自动生成”模式，使其成为一个可配置、可使用自定义API、支持后台运行与状态恢复的强大功能。
- **v14.0.0**: 增加各阶段“执行次数”配置。
- **v13.0.0**: 集成自定义AI API功能。
- **v12.0.0**: 重构为后台任务，支持状态恢复。
- **v11.0.0**: 新增“全自动生成”模式。

### v10.x - v8.x (代码重构与更新机制)
- **核心**: 对项目进行了底层重构，实现了数据与逻辑分离，并建立了一套完整的自动更新机制。
- **v10.x**: 核心代码重构，数据与逻辑分离。
- **v9.x**: 重构更新机制，增加用户控制，并修复UI问题。
- **v8.0.0**: 引入自动更新功能。

### v7.x - v1.x (核心功能与UI/UX迭代)
- **核心**: 实现了插件从0到1的完整功能，包括四个创作阶段、可拖动悬浮按钮等核心交互。最关键的是，在用户的持续指导下，对提示词工程进行了多次革命性重构，建立了“规则+示例”、“指令注入内容”、“三级条目体系”等核心思想，奠定了高质量内容生成的基础。
- **v7.x**: 实现可拖动悬浮按钮，统一UI视觉。
- **v6.x - v2.x**: **提示词工程革命**，根据用户反馈和“圣经级”范例，对生成逻辑进行了多次脱胎换骨的重构，从根本上提升了内容质量。
- **v1.x**: 完成四阶段创作的完整功能里程碑，并增加了阶段切换器、全局解锁指令等核心交互。

### v0.x (项目启动与基础构建)
- **核心**: 搭建了项目基本框架，并根据`my-world-book-momo`等最佳实践，逐步建立了“生成-审核-上传”的核心工作流、断点续传、上下文传递等基础功能。
- **v0.9.0 - v0.7.0**: 引入“元素池”和迭代式工作流。
- **v0.6.x**: 实现“断点续传”和日志功能，修复关键BUG。
- **v0.5.0 - v0.1.0**: 搭建框架，实现前两阶段基本功能，并根据最佳实践重构。
