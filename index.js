// 使用 jQuery 确保在 DOM 加载完毕后执行我们的代码
jQuery(async () => {
  // -----------------------------------------------------------------
  // 1. 定义常量和状态变量
  // -----------------------------------------------------------------
  const extensionName = "world-book-generator";
  const extensionFolderPath = `scripts/extensions/third-party/${extensionName}`;
  let tavernHelperApi; // 存储 TavernHelper API

  // 项目状态管理
  const projectState = {
    bookName: "",
    currentStage: 1,
    generatedContent: null,
    generatedOutlineContent: null,
    generatedDetailContent: null,
    generatedMechanicsContent: null,
  };

  /**
   * 新的、简化的更新检查器类
   */
  class WBGUpdater {
    constructor() {
      this.owner = "1830488003";
      this.repo = "world-book-generator";
      this.currentVersion = "";
      this.latestVersion = "";
      this.storageKey = "wbg_auto_update_enabled";

      this.elements = {
        versionDisplay: null,
        checkButton: null,
        autoUpdateToggle: null,
      };
    }

    async init() {
      // 仅在设置页面执行
      if (!document.getElementById("wbg-updater-section")) {
        // 如果不在设置页面，但开启了自动更新，则静默检查
        const autoUpdateEnabled =
          localStorage.getItem(this.storageKey) !== "false";
        if (autoUpdateEnabled) {
          await this.loadManifest();
          this.checkForUpdates(false);
        }
        return;
      }

      this.elements.versionDisplay = document.getElementById(
        "wbg-current-version",
      );
      this.elements.checkButton = document.getElementById(
        "wbg-check-update-button",
      );
      this.elements.autoUpdateToggle = document.getElementById(
        "wbg-auto-update-toggle",
      );

      if (
        !this.elements.versionDisplay ||
        !this.elements.checkButton ||
        !this.elements.autoUpdateToggle
      ) {
        console.error("WBGUpdater: 未能找到所有更新相关的UI元素。");
        return;
      }

      await this.loadManifest();
      this.setupEventListeners();
      this.loadSettings();

      if (this.elements.autoUpdateToggle.checked) {
        this.checkForUpdates(false); // 页面加载时静默检查
      }
    }

    async loadManifest() {
      try {
        const response = await fetch(
          `/${extensionFolderPath}/manifest.json?v=${new Date().getTime()}`,
        );
        const manifest = await response.json();
        this.currentVersion = manifest.version;
        if (this.elements.versionDisplay) {
          this.elements.versionDisplay.textContent = `v${this.currentVersion}`;
        }
      } catch (error) {
        console.error("WBGUpdater: 加载 manifest.json 失败", error);
        if (this.elements.versionDisplay) {
          this.elements.versionDisplay.textContent = "错误";
        }
      }
    }

    setupEventListeners() {
      this.elements.checkButton.addEventListener("click", () =>
        this.checkForUpdates(true),
      );
      this.elements.autoUpdateToggle.addEventListener("change", (event) => {
        localStorage.setItem(this.storageKey, event.target.checked);
        toastr.info(`自动检查更新已${event.target.checked ? "开启" : "关闭"}`);
      });
    }

    loadSettings() {
      const autoUpdateEnabled = localStorage.getItem(this.storageKey);
      this.elements.autoUpdateToggle.checked = autoUpdateEnabled !== "false";
    }

    async checkForUpdates(manual = false) {
      if (manual) {
        toastr.info("正在检查更新...");
        this.elements.checkButton.disabled = true;
        this.elements.checkButton.innerHTML =
          '<i class="fas fa-spinner fa-spin"></i> 检查中...';
      }
      try {
        // Fetch remote manifest from raw.githubusercontent.com
        const response = await fetch(
          `https://raw.githubusercontent.com/${this.owner}/${
            this.repo
          }/main/manifest.json?v=${new Date().getTime()}`,
        );
        if (!response.ok) {
          throw new Error(
            `从 Github 获取 manifest 失败: ${response.statusText}`,
          );
        }
        const remoteManifest = await response.json();
        this.latestVersion = remoteManifest.version;

        console.log(
          `[${extensionName}] 当前版本: ${this.currentVersion}, 最新版本: ${this.latestVersion}`,
        );

        if (this.compareVersions(this.latestVersion, this.currentVersion) > 0) {
          const releaseUrl = `https://github.com/${this.owner}/${this.repo}/`;
          toastr.success(
            `发现新版本 v${this.latestVersion}！点击这里前往Github仓库页面。`,
            "更新提示",
            {
              onclick: () => window.open(releaseUrl, "_blank"),
              timeOut: 0, // 永不自动消失
              extendedTimeOut: 0, // 鼠标悬停时也永不消失
            },
          );
        } else if (manual) {
          toastr.success("您当前使用的是最新版本。");
        }
      } catch (error) {
        console.error("WBGUpdater: 检查更新失败", error);
        if (manual) {
          toastr.error(
            `检查更新失败: ${error.message}。请稍后再试或查看浏览器控制台获取更多信息。`,
          );
        }
      } finally {
        if (manual) {
          this.elements.checkButton.disabled = false;
          this.elements.checkButton.innerHTML =
            '<i class="fa-solid fa-cloud-arrow-down"></i> 检查更新';
        }
      }
    }

    compareVersions(v1, v2) {
      const parts1 = v1.split(".").map(Number);
      const parts2 = v2.split(".").map(Number);
      const len = Math.max(parts1.length, parts2.length);
      for (let i = 0; i < len; i++) {
        const p1 = parts1[i] || 0;
        const p2 = parts2[i] || 0;
        if (p1 > p2) return 1;
        if (p1 < p2) return -1;
      }
      return 0;
    }
  }

  // 内置细节深化元素池
  const detailElementPool = {
    人物深度刻画: {
      人物深度刻画: [
        "主角童年的一段关键经历",
        "反派不为人知的一面",
        "某个配角的高光时刻",
        "主角父母的爱情故事",
        "一位历史英雄的堕落过程",
        "一个凡人如何影响世界格局",
        "主角的某一个前世/轮回",
        "某个角色的心魔来源",
        "一个角色的特殊癖好及其成因",
        "主角与某位红颜知己的初遇",
        "一个角色的三次重大人生选择",
        "某个角色的日记/书信",
        "一个角色的完整传承来历",
        "某个角色最害怕/最珍视的东西",
        "一个角色如何获得其称号/绰号",
        "一个角色的厨艺/才艺展示",
        "一个角色在绝境中的内心独白",
        "一个角色不为人知的身份",
        "一个角色与宠物的深厚感情",
        "一个角色对其功法/能力的独特理解",
      ],
    },
    地点风物详述: {
      地点风物详述: [
        "某个都城的坊市/街道布局与特色店铺",
        "一个禁地的危险与机遇",
        "一个宗门/学院的山门与内部景观",
        "一个边陲小镇的风土人情",
        "一处上古遗迹的机关与壁画",
        "某个种族的主城/圣地",
        "一个商业中心的商品与贸易规则",
        "一个风景名胜的传说与诗词",
        "一个充斥着亡灵/鬼魂的“鬼城”",
        "一个隐藏在深山中的世外桃源",
        "一个位于海底/天空的奇特城市",
        "一个充满赛博朋克风格的贫民窟",
        "一个巨大图书馆/藏经阁的内部",
        "一个顶级餐厅/酒楼的招牌菜",
        "一个角斗场/比武场的血腥历史",
        "一个黑市的入口与交易规则",
        "一个凡人村庄的节日庆典",
        "一个流淌着熔岩/寒冰的极端之地",
        "一个连接异世界的“传送门”所在地",
        "一个被历史遗忘的古战场",
      ],
    },
    势力组织揭秘: {
      势力组织揭秘: [
        "一个顶尖宗门的内部权力斗争",
        "一个杀手组织的训练方式与信条",
        "一个商业帝国的发展史",
        "一个情报组织如何收集和传递信息",
        "一个反抗军的组织架构与行动纲领",
        "一个古老家族的族规与传承仪式",
        "一个邪教的教义与蛊惑人心的手段",
        "一个佣兵团的成名之战",
        "一个由炼丹师/炼器师组成的行会",
        "一个守护世界秘密的古老盟约",
        "一个海盗/星盗团伙的黑话与规矩",
        "一个国家的官僚体系与科举制度",
        "一个学院的课程设置与毕业要求",
        "一个由“玩家”/“穿越者”组成的公会",
        "一个专门处理“异常事件”的官方机构",
        "一个慈善组织背后的阴谋",
        "一个只在夜晚出现的“幽灵组织”",
        "一个由各种非人种族组成的联盟",
        "一个追求永生/飞升的秘密社团",
        "一个势力的详细财政收入与支出",
      ],
    },
    神器法宝溯源: {
      神器法宝溯源: [
        "一把神剑的第一任主人及其故事",
        "一件魔器如何蛊惑人心、流转千年",
        "一套战甲的每一次破碎与重铸",
        "一个丹炉/器鼎的传承历史",
        "一件拥有自我意识的法宝的“心路历程”",
        "一件辅助修炼的至宝的来历",
        "一件看似普通却有逆天功效的物品",
        "一件专门克制主角的“天敌”法宝",
        "一件由无数生灵献祭而成的禁忌武器",
        "一件能够穿越时空/预测未来的道具",
        "一件法宝的详细炼制过程与材料",
        "一件法宝的所有“前女友”/“前男友”",
        "一件法宝的“使用说明书”与副作用",
        "一件成套法宝的收集难度与集齐效果",
        "一件与某个历史事件深度绑定的信物",
        "一件可以“吞噬”成长的法宝",
        "一件代表着某个种族/势力权柄的信物",
        "一件由主角亲手打造的“本命法宝”",
        "一件被封印的、等待主角唤醒的神器",
        "一件拥有“搞笑”属性的奇葩法宝",
      ],
    },
    功法神通详解: {
      功法神通详解: [
        "一门绝世功法的总纲与修炼法门",
        "一个禁术的威力与可怕代价",
        "一个天赋神通的觉醒与进化过程",
        "一门剑法/刀法的每一招每一式",
        "一个阵法的布置方法与阵眼核心",
        "一种炼丹/炼器手法的诀窍",
        "一种诅咒/巫术的发动条件与解除方法",
        "一种独特的变身/狂化能力",
        "一种可以“复制”/“学习”他人能力的功法",
        "一种精神/灵魂攻击的防御法门",
        "一种功法的不同修炼分支与优劣",
        "一种功法与特定血脉/体质的配合",
        "一种功法修炼到极致引发的“天地异象”",
        "一种功法的创造者及其心路历程",
        "一种“双修”功法的详细描述",
        "一种需要“入魔”/“献祭”才能练成的功法",
        "一种可以“暂停时间”的神通",
        "一种“言出法随”的修炼方法",
        "一种“一气化三清”的分身术",
        "一种“种田”/“养殖”类功法",
      ],
    },
    历史事件考据: {
      历史事件考据: [
        "一场上古神魔大战的真实原因",
        "一个伟大王朝覆灭的详细过程",
        "一次“灵气复苏”的来龙去脉",
        "一次改变世界格局的“科技爆炸”",
        "一个著名“刺杀”事件的幕后真相",
        "一场席卷大陆的“大瘟疫”的源头",
        "一个“黄金时代”是如何开启的",
        "一次失败的“飞升”/“成神”事件",
        "一个种族被“灭绝”的历史记载",
        "一次著名的“焚书坑儒”/“知识断代”",
        "两个敌对势力签订“和平条约”的细节",
        "一个英雄人物被“污名化”的过程",
        "一个“预言”是如何一步步实现的",
        "一次“天外来客”降临事件",
        "一个“世界重置”的按钮被按下的那天",
        "一次大规模的“迁徙”/“出埃及记”",
        "一个“乌托邦”的建立与崩溃",
        "一次对“神”的审判",
        "一个“文明”的诞生礼",
        "历史中被刻意抹去的一百年",
      ],
    },
    种族文化深掘: {
      种族文化深掘: [
        "龙族的成年试炼与传承记忆",
        "精灵族的艺术、诗歌与自然观",
        "矮人的锻造工艺与对烈酒的痴迷",
        "兽人的图腾崇拜与荣耀观",
        "亡灵族的社会结构与对“生”的看法",
        "机械生命的“逻辑”与对“情感”的模拟",
        "妖族的化形之劫与血脉等级",
        "魔族的混乱美学与力量至上",
        "神族的“神性”与“人性”的挣扎",
        "虫族的“母巢”与集体意志",
        "元素生命的形态与情感表达方式",
        "海族的潮汐信仰与水下城市",
        "羽人/翼人的天空之城与飞行文化",
        "一个以“梦境”为生的种族",
        "一个靠“吞噬”其他文明进化的种族",
        "一个没有“个体”概念的种族",
        "一个种族独特的婚丧嫁娶习俗",
        "一个种族的“创世神话”与英雄史诗",
        "一个种族与其他种族的“混血儿”",
        "一个种族的“饮食文化”与特色美食",
      ],
    },
    天地异象解读: {
      天地异象解读: [
        "“九星连珠”/“血月当空”的预兆",
        "一场持续百年的“灵气之雨”",
        "一座从天而降的“仙山”",
        "一条突然出现的“通天之路”",
        "一个巨大“世界树”的枯萎与新生",
        "一条“时间长河”的支流出现",
        "天空中出现巨大的“眼睛”/“裂缝”",
        "整个世界被“黑雾”笼罩三日",
        "所有人的“修为”被压制到同一水平",
        "“天道”降下的“功德金光”/“灭世神雷”",
        "一个死去的神/大能复活",
        "一个新生儿出生时引动的天地共鸣",
        "一个地方的“法则”被永久改变",
        "一个“系统”/“主神”的全球公告",
        "一个“副本”/“秘境”的入口在全世界随机出现",
        "所有生物都听到了来自深渊的“低语”",
        "一个“预言”中的灾难开始应验",
        "一个凡人国家突然变成了“修仙圣地”",
        "一个“游戏”降临现实",
        "太阳/月亮消失了",
      ],
    },
    社会百态描摹: {
      社会百态描摹: [
        "一个修仙世界里凡人的一天",
        "一个大都市里“打工人”的生存现状",
        "一个宗门外门弟子的“内卷”生活",
        "一个贵族家庭的奢华宴会",
        "一个冒险者酒馆里的吹牛与情报交易",
        "一个奴隶市场的残酷景象",
        "一个青楼/教坊司里的才子佳人",
        "一个书院/国子监里的学子辩论",
        "一个黑帮/漕运的“码头文化”",
        "一个普通农夫的春种秋收",
        "一个乞丐群体的“内部规则”",
        "一个捕快/锦衣卫的“办案”日常",
        "一个炼丹/炼器大师的“工匠精神”",
        "一个“戏子”/“伶人”的台前幕后",
        "一个“说书人”如何改编真实事件",
        "一个“刽子手”的禁忌与传承",
        "一个“镖局”的走镖过程",
        "一个“盗墓贼”的行话与工具",
        "一个“和尚”/“道士”的清修生活",
        "一个“皇帝”的烦恼",
      ],
    },
    奇珍异兽图鉴: {
      奇珍异兽图鉴: [
        "一种可以吞噬“气运”的瑞兽",
        "一种以“噩梦”为食的奇特生物",
        "一种可以“产出”灵石的“矿石兽”",
        "一种拥有“读心术”的狐妖",
        "一种可以“复制”任何形态的“变形怪”",
        "一种守护着上古遗迹的“傀儡”/“石像鬼”",
        "一种生活在“时间长河”中的“时之鱼”",
        "一种寄生在“概念”中的“思想虫”",
        "一种只在“血月”之夜出现的“狼人”",
        "一种由“怨气”凝聚而成的“怨灵”",
        "一种可以“净化”万物的“独角兽”",
        "一种可以“引渡”灵魂的“冥蝶”",
        "一种以“谎言”为食的“谛听”",
        "一种可以“编织”命运的“蜘蛛”",
        "一种生活在火山里的“火蜥蜴”",
        "一种可以“冰封”一切的“冰凤凰”",
        "一种由“兵器”化形的“剑灵”",
        "一种可以“治疗”万物的“圣光精灵”",
        "一种看起来无害却剧毒无比的“卖萌兽”",
        "一种只存在于“传说”中的生物",
      ],
    },
    丹药符箓大观: {
      丹药符箓大观: [
        "一种可以“逆天改命”的九转金丹",
        "一种能让人“起死回生”的丹药",
        "一种可以“永久”提升根骨/天赋的丹药",
        "一种能让人“强制”说真话的“诚实药剂”",
        "一种能让人“忘记”一段记忆的“忘情水”",
        "一种可以“伪装”成任何人的“易容丹”",
        "一种能让人“爆种”但有巨大副作用的“狂暴丹”",
        "一种可以“辟谷”多年的“辟谷丹”",
        "一种能解“天下奇毒”的“解毒丹”",
        "一种能让人“青春永驻”的“驻颜丹”",
        "一张可以“召唤神雷”的顶级符箓",
        "一张可以“传送”万里的“神行符”",
        "一张可以“隐身”的“隐身符”",
        "一张可以“防御”致命一击的“替死符”",
        "一张可以“封印”敌人修为的“封灵符”",
        "一张可以“召唤”强大存在的“召唤符”",
        "一张可以“魅惑”人心的“桃花符”",
        "一张可以“提升财运”的“招财符”",
        "一张画着“狗头”的保命符",
        "一张需要用“精血”才能激活的禁忌符箓",
      ],
    },
    阵法禁制剖析: {
      阵法禁制剖析: [
        "一个笼罩整个宗门的“护山大阵”",
        "一个专门用来“困杀”敌人的“绝杀阵”",
        "一个可以“聚集”天地灵气的“聚灵阵”",
        "一个可以“迷惑”人心神的“幻阵”",
        "一个可以“穿越”时空的“传送阵”",
        "一个守护着宝藏的“上古禁制”",
        "一个刻在“血脉”中的“诅咒封印”",
        "一个由无数“剑气”组成的“剑阵”",
        "一个需要“生灵献祭”才能发动的“邪阵”",
        "一个可以“逆转阴阳”的“两仪阵”",
        "一个由“星辰之力”驱动的“周天星斗大阵”",
        "一个可以“推演天机”的“八卦阵”",
        "一个可以“融合”万物的“炼化大阵”",
        "一个“只进不出”的“迷宫阵”",
        "一个可以“暂停时间”的“静止领域”",
        "一个可以“召唤”域外天魔的“献祭法阵”",
        "一个由“人心”构成的“心魔大阵”",
        "一个可以“窃取”国运的“风水大阵”",
        "一个由主角“自创”的全新阵法",
        "一个看起来很厉害但其实是纸老虎的“空城计”阵法",
      ],
    },
    世界观补完: {
      世界观补完: [
        "“天道”的真实身份与目的",
        "“系统”/“主神”的来源与运行机制",
        "“灵气”/“魔能”的本质是什么",
        "“飞升”/“成神”之后的世界是怎样的",
        "“轮回”的运作原理",
        "“气运”是如何量化和影响一个人的",
        "“穿越者”/“重生者”的出现对世界意味着什么",
        "“世界等级”是如何划分和提升的",
        "“神”与“仙”的区别",
        "“道”与“法”的辩证关系",
        "“心魔”的产生与克制方法",
        "“功德”与“业力”的计算方式",
        "“长生”的代价是什么",
        "“命运”是否可以被改变",
        "“世界”是有边界的，还是无限的",
        "“主角光环”的科学解释",
        "“顿悟”的触发条件",
        "“文字”/“语言”的力量来源",
        "“阴间”/“地府”的真实样貌",
        "这个世界的“终极答案”是什么",
      ],
    },
    反派动机深挖: {
      反派动机深挖: [
        "他所做的一切都是为了复活一个人",
        "他曾经是这个世界的“英雄”",
        "他只是想证明自己比主角强",
        "他的“邪恶”是为了对抗更大的“邪恶”",
        "他被一个更强大的存在所控制/蛊惑",
        "他想创造一个“没有痛苦”的“理想世界”",
        "他只是想向曾经伤害过他的人复仇",
        "他是一个“失败”的“救世主”",
        "他认为这个世界已经“腐朽”，需要“净化”",
        "他只是想“回家”",
        "他是一个“实验”的产物，想要寻找自己的“意义”",
        "他是一个“求道者”，为了“真理”不择手段",
        "他是一个“可怜人”，被命运一步步逼上绝路",
        "他只是单纯地“享受”混乱与毁灭",
        "他与主角有着“血海深仇”",
        "他想“取代”主角，成为“天命之子”",
        "他是一个“环保主义者”，认为人类是“毒瘤”",
        "他是一个“理想主义者”，但方法过于极端",
        "他只是想“活下去”",
        "他其实是主角的“另一面”/“父亲”",
      ],
    },
    "江湖/朝堂秘闻": {
      "江湖/朝堂秘闻": [
        "某位正道大侠的“黑历史”",
        "魔教教主其实是“卧底”",
        "皇帝/国王的“私生子”流落在外",
        "某个大宗门/世家崛起的“不光彩”手段",
        "一份足以颠覆王朝的“藏宝图”",
        "某个“已故”的英雄其实还活着",
        "皇后/贵妃与侍卫/王爷的“私情”",
        "一份“通敌卖国”的信件",
        "某个“忠臣”其实是最大的“奸臣”",
        "一个流传甚广的“童谣”里隐藏的秘密",
        "某个“悬案”/“奇案”的真相",
        "太子/皇子之间的“夺嫡之争”",
        "某个“太监”/“宫女”的真实身份",
        "一份“百官行述”/“黑名单”",
        "某个“清官”的贪腐证据",
        "一个“状元”/“才子”的“抄袭”丑闻",
        "某个将军“克扣军饷”的账本",
        "一个“刺客”的“任务日志”",
        "一个“公主”/“郡主”的“逃婚”计划",
        "一个关于“前朝宝藏”的传说",
      ],
    },
    饮食服饰文化: {
      饮食服饰文化: [
        "一种用“灵气”灌溉的“灵米”",
        "一种以“妖兽肉”为食材的“全妖宴”",
        "一种能“增长修为”的“仙酿”",
        "一种吃了能“致幻”的“蘑菇”",
        "一个地方独特的“茶文化”/“酒文化”",
        "一种用“法术”烹饪的“分子料理”",
        "一个宗门的“制式道袍”及其等级划分",
        "一个王朝的“官服”/“朝服”制度",
        "一个种族华丽的“祭祀服装”",
        "一种用“天材地宝”织成的“法衣”",
        "一个地方“女尊男卑”的服饰特点",
        "一种“杀马特”/“非主流”的潮流风格",
        "一种可以“隐形”/“变形”的衣服",
        "一个“乞丐”群体的“百家衣”文化",
        "一个“刺客”的“夜行衣”",
        "一个“皇帝”的“龙袍”的制作工艺",
        "一个“新娘”的“嫁衣”及其传说",
        "一个“书生”的“儒衫”",
        "一个“剑客”的“斗笠”与“蓑衣”",
        "一种“看起来很好吃”但有毒的植物",
      ],
    },
    节日庆典仪式: {
      节日庆典仪式: [
        "纪念上古英雄的“英雄祭”",
        "庆祝丰收的“丰收节”",
        "驱逐“年兽”/“邪祟”的“新年”",
        "男女定情的“女儿节”/“情人节”",
        "祭祀祖先/神明的“祭天大典”",
        "一个宗门的“开山收徒”仪式",
        "一个王朝的“登基大典”",
        "一个种族的“成年礼”",
        "一个“比武招亲”大会",
        "一个“炼丹”/“炼器”大赛",
        "一个“作死”的“召唤邪神”仪式",
        "一个“新生儿”的“洗礼”",
        "一个“逝者”的“葬礼”与“超度”仪式",
        "一个“结拜”/“金兰”的仪式",
        "一个“拜师”的仪式",
        "一个“立誓”/“发毒咒”的仪式",
        "一个“祈雨”的仪式",
        "一个“庆祝战争胜利”的阅兵式",
        "一个“化解恩怨”的“和解酒”",
        "一个“迎接圣女/神使”的庆典",
      ],
    },
    日常琐事趣闻: {
      日常琐事趣闻: [
        "某个大人物不为人知的“小癖好”",
        "一个流传在市井间的“搞笑段子”",
        "一个关于“隔壁老王”的八卦",
        "一个“熊孩子”的“作死”日常",
        "一个“妻管严”的“血泪史”",
        "一个“宠物”比“主人”还强的趣事",
        "一个“路痴”的“悲惨”经历",
        "一个“脸盲”认错人的尴尬场面",
        "一个“倒霉蛋”的“喝凉水都塞牙”的一天",
        "一个“学霸”与“学渣”的“鸡同鸭讲”",
        "一个“钢铁直男”的“骚操作”",
        "一个“富二代”的“朴实无华”的生活",
        "一个“穷鬼”的“省钱妙招”",
        "一个“戏精”的“内心戏”",
        "一个“杠精”如何“抬杠”",
        "一个“吃货”的“美食地图”",
        "一个“睡神”在哪里都能睡着的故事",
        "一个“强迫症”的“痛苦”生活",
        "一个“社恐”如何“出门”",
        "一个关于“谁是天下第一”的“月经贴”",
      ],
    },
    金手指副作用: {
      金手指副作用: [
        "系统/老爷爷会夺舍主角",
        "使用能力会消耗寿命/情感",
        "能力过于强大，导致身体/灵魂崩溃",
        "重生/穿越的记忆是虚假的/被篡改的",
        "金手指是“鱼饵”，背后有巨大阴谋",
        "每次使用能力都会“欠下”因果/业力",
        "能力会吸引强大的“天敌”/“猎杀者”",
        "系统发布的任务都是“陷阱”",
        "金手指会逐渐改变主角的“性格”/“人性”",
        "金手指需要“吞噬”他人的气运/生命",
        "金手指有“电量”/“使用次数”限制",
        "金手指的“智能”会“背叛”主角",
        "金手指是“残缺”的，需要不断“修复”",
        "金手指会带来“厄运”/“诅咒”",
        "金手指的“前任主人”会找上门来",
        "金手指会与主角的“功法”/“血脉”冲突",
        "金手指的“声音”太“吵”/“烦人”",
        "金手指的“审美”/“品味”很差",
        "金手指是个“财迷”/“吃货”",
        "金手指的“终极目标”是“毁灭世界”",
      ],
    },
    "门派/家族规矩": {
      "门派/家族规矩": [
        "禁止同门相残/骨肉相争",
        "不得背叛师门/家族",
        "不得与魔道/外族通婚",
        "必须保守门派/家族的秘密",
        "见到师长/长辈必须行礼",
        "入门/成年后必须完成的“试炼”",
        "特定的“禁地”任何人不得擅入",
        "关于“传承”/“继承权”的规定",
        "对于“叛徒”的“惩罚”措施",
        "门下弟子/族人不得“干预凡俗”",
        "一个“奇怪”的、流传已久的“祖训”",
        "关于“资源分配”的“贡献度”制度",
        "一个“保护”天才弟子的“潜规则”",
        "一个“淘汰”末位弟子的“残酷”规定",
        "一个关于“道侣”/“配偶”的选择标准",
        "一个“必须”遵守的“饮食”/“作息”习惯",
        "一个“禁止”学习/讨论的“禁术”",
        "一个“看似不合理”但有深意的规矩",
        "一个“只有核心成员”才知道的“秘密规定”",
        "一个“可以通融”但不能明说的“潜规则”",
      ],
    },
  };

  // 内置游戏机制元素池
  const mechanicsElementPool = {
    核心修炼规则: {
      核心修炼规则: [
        "吐纳灵气，炼化为元",
        "观想神魔，凝练神魂",
        "气血搬运，打磨肉身",
        "吞噬异火/神雷，淬炼己身",
        "信仰成神，收集香火",
        "功德证道，行善积德",
        "杀戮证道，凝聚杀气",
        "双修/合欢，采阴补阳",
        "炼制/服用丹药，强行破境",
        "参悟天地法则，言出法随",
        "推演/创造功法",
        "夺取他人气运/修为",
        "温养本命法宝/飞剑",
        "修炼第二元神/身外化身",
        "点燃神火，凝聚神格",
        "开辟体内世界/洞天",
        "融合上古神兽血脉",
        "修炼神通/天赋能力",
        "斩三尸/断尘缘",
        "以情入道/无情大道",
      ],
    },
    战斗判定系统: {
      战斗判定系统: [
        "境界压制，高一阶碾压",
        "法宝/神器等级决定胜负",
        "功法/血脉克制关系",
        "气运/天命影响战局",
        "临场顿悟，阵前突破",
        "底牌/后手定乾坤",
        "神魂/道心比拼",
        "法力/元气雄厚度",
        "战斗经验/技巧",
        "对天地法则的领悟程度",
        "阵法/符箓的运用",
        "丹药/毒药的辅助",
        "偷袭/暗算/围攻",
        "燃烧精血/寿命，爆发潜力",
        "召唤兽/护道者参战",
        "利用天时地利",
        "因果/业力反噬",
        "主角光环/剧情杀",
        "嘴炮/垃圾话动摇道心",
        "装备/套装效果",
      ],
    },
    经济与资源: {
      经济与资源: [
        "灵石（下品/中品/上品/极品）",
        "宗门贡献点/功勋",
        "天材地宝/灵药/神材",
        "丹药/法宝/符箓交易",
        "情报/消息/知识交易",
        "洞天福地/灵脉的租赁与抢夺",
        "奴隶/炉鼎/战宠买卖",
        "拍卖行/黑市/当铺",
        "悬赏任务/佣兵委托",
        "宗门/家族的月俸",
        "打家劫舍/杀人夺宝",
        "开设店铺/经营产业",
        "赌石/寻宝/探险",
        "气运/功德/信仰交易",
        "灵魂/寿命交易",
        "技术/传承垄断",
        "跨界/跨位面贸易",
        "敲诈勒索/收取保护费",
        "挖矿/种植/养殖",
        "“打赏”/“众筹”",
      ],
    },
    社交与关系: {
      社交与关系: [
        "好感度/仇恨度系统",
        "道侣/双修伴侣",
        "师徒/宗门/家族关系",
        "结拜兄弟/金兰姐妹",
        "主仆/契约关系",
        "宿敌/一生之敌",
        "正道/魔道/中立阵营",
        "声望/名气/称号",
        "因果/人情/欠债",
        "道心誓言/天道誓约",
        "血脉感应/宿命的羁绊",
        "神交/论道/煮酒论英雄",
        "传音/飞剑传书/玉简通讯",
        "宴会/庆典/大比",
        "提亲/退婚/抢亲",
        "拜山/踢馆/挑战",
        "调解/仲裁/见证人",
        "卧底/间谍/无间道",
        "拉帮结派/站队",
        "“朋友圈”/“聊天群”",
      ],
    },
    死亡与复活: {
      死亡与复活: [
        "身死道消，彻底陨落",
        "兵解转世/轮回重修",
        "夺舍重生",
        "残魂/一缕神念存活",
        "滴血重生/不死之身",
        "被长辈/大能复活",
        "进入英灵殿/封神榜",
        "成为器灵/地缚灵",
        "被打入十八层地狱/无尽深渊",
        "时间倒流/读档重来",
        "进入“假死”状态",
        "被炼制成傀儡/僵尸",
        "复活需要付出巨大代价",
        "世界上所有人都忘记了他",
        "在别人的记忆中“活着”",
        "成为“系统”/“天道”的一部分",
        "在“未来”复活",
        "复活后性情大变/失去记忆",
        "复活后修为尽失",
        "根本死不了的“诅咒”",
      ],
    },
    炼丹与炼器: {
      炼丹与炼器: [
        "丹药品阶（一至九品/凡-仙-神）",
        "丹毒/是药三分毒",
        "炸炉/炼制失败",
        "丹劫/器劫",
        "本命丹炉/神火",
        "上古丹方/炼器图谱",
        "药材/材料的君臣佐使",
        "特殊的炼制手法/印诀",
        "器灵/丹灵的诞生",
        "装备的强化/镶嵌/附魔",
        "法宝的“套装”效果",
        "一次性消耗品（符箓/阵盘）",
        "“垃圾”材料炼出“神器”",
        "炼丹/炼器师的“等级认证”",
        "“以身炼丹”/“以身炼器”",
        "“偷”别人的丹药/法宝",
        "丹药/法宝的“副作用”",
        "“私人订制”服务",
        "“流水线”生产",
        "“山寨”/“仿制”名牌",
      ],
    },
    阵法与禁制: {
      阵法与禁制: [
        "护山大阵/守护结界",
        "困阵/杀阵/幻阵",
        "传送阵/挪移阵",
        "聚灵阵/修炼室",
        "以身化阵/血肉为基",
        "阵眼/阵旗/阵盘",
        "破阵/解禁的方法",
        "上古遗留的天然大阵",
        "禁制/封印（血脉/修为/记忆）",
        "阵法师/奇门遁甲",
        "“阵中阵”/“连环阵”",
        "需要特定“钥匙”/“口诀”",
        "“一次性”自爆大阵",
        "可以“移动”/“成长”的阵法",
        "“风水”大阵/国运阵法",
        "“周天星斗”/“十二都天”等神话大阵",
        "“合击”阵法",
        "刻在身上的“阵纹”/“刺青”",
        "“心”阵/考验道心",
        "“搞笑”/“恶作剧”阵法",
      ],
    },
    世界探索: {
      世界探索: [
        "秘境/副本/遗迹探索",
        "藏宝图/寻宝任务",
        "机缘/奇遇/顿悟",
        "跳蚤市场/鬼市淘宝",
        "“老爷爷”/“系统”的指引",
        "“仇家”追杀下的“逃亡”路线",
        "“地图”/“星图”的解锁",
        "“NPC”/“路人”的传闻与八卦",
        "“吟游诗人”/“说书人”的故事",
        "“天机阁”/“百晓生”的情报",
        "“考古”/“发掘”失落的文明",
        "“占卜”/“推演”天机",
        "“梦境”/“幻境”中的线索",
        "“跨位面”/“异世界”的旅行",
        "“微服私访”/“扮猪吃虎”",
        "“钓鱼执法”",
        "“跟踪”/“窃听”",
        "“解谜”/“破案”",
        "“试炼”/“考验”",
        "“作死”/“好奇心”",
      ],
    },
    气运与因果: {
      气运与因果: [
        "气运之子/天命主角",
        "气运华盖/金龙护体",
        "窃取/掠夺他人气运",
        "气运反噬/盛极而衰",
        "善有善报，恶有恶报",
        "因果线/命运之网",
        "斩断因果/跳出三界外",
        "欠下人情/因果债务",
        "业力/罪孽缠身",
        "功德金光/福缘深厚",
        "“挡箭牌”/替死鬼",
        "“龙套”的“剧情杀”",
        "“世界”的“修正力”",
        "“蝴蝶效应”",
        "“定数”与“变数”",
        "“无心之举”结下“善缘”",
        "“一饮一啄，莫非前定”",
        "“父债子偿”",
        "“天道”的“亲儿子”和“干儿子”",
        "“气运”可以当饭吃/卖钱",
      ],
    },
    宠物与坐骑: {
      宠物与坐骑: [
        "神兽/圣兽/凶兽",
        "签订平等/主仆/血脉契约",
        "可成长/进化/变异",
        "拥有特殊天赋/神通",
        "可与主人“合体”/“融合”",
        "“话痨”/“毒舌”/“财迷”属性",
        "“扮猪吃虎”的“萌宠”",
        "“寻宝”/“战斗”/“代步”功能",
        "“妖兽”化形",
        "“器灵”/“剑灵”",
        "“植物”/“藤蔓”类宠物",
        "“元素”/“能量”类宠物",
        "“机械”/“构装”类坐骑",
        "“幽灵”/“亡灵”类宠物",
        "“虫群”/“分身”类宠物",
        "“坐骑”比主人还拉风",
        "“宠物”的“后宫”比主人还多",
        "“宠物”才是真正的“主角”",
        "“宠物”的“口粮”很贵",
        "“云养”宠物",
      ],
    },
    "宗门/家族系统": {
      "宗门/家族系统": [
        "弟子等级（外门/内门/核心/真传）",
        "贡献度/任务系统",
        "藏经阁/功法库",
        "炼丹房/炼器室/修炼塔",
        "宗门大比/家族试炼",
        "护山大阵/守护神兽",
        "长老会/太上长老",
        "刑罚堂/执法队",
        "资源分配/月俸",
        "“派系”/“山头”林立",
        "“卧底”/“叛徒”",
        "“祖地”/“禁地”",
        "“血脉”/“传承”仪式",
        "“联姻”/“结盟”",
        "“荣誉感”/“归属感”",
        "“潜规则”/“关系户”",
        "“天才”与“废物”的待遇差别",
        "“踢馆”/“灭门”的风险",
        "“开山收徒”的标准",
        "“清理门户”",
      ],
    },
    "特殊体质/血脉": {
      "特殊体质/血脉": [
        "先天道体/圣体/神体",
        "废体/厄难毒体",
        "剑体/刀体/霸体",
        "百毒不侵/万法不侵",
        "对某种能量/法则天生亲和",
        "上古神/魔/妖的血脉",
        "“吞噬”/“融合”类血脉",
        "“轮回”/“时空”类血脉",
        "“预知”/“言灵”类血脉",
        "“魅力”/“魅惑”类血脉",
        "“幸运”/“倒霉”类体质",
        "“伪装”/“拟态”类血脉",
        "“自愈”/“再生”能力",
        "“双生”/“共生”血脉",
        "“献祭”/“诅咒”类血脉",
        "“人造”/“嫁接”的血脉",
        "“返祖”/“觉醒”",
        "血脉有“缺陷”/“副作用”",
        "血脉之间有“压制”/“吸引”",
        "“平平无奇”的“凡体”",
      ],
    },
    心境与道心: {
      心境与道心: [
        "道心通明/赤子之心",
        "心魔丛生/走火入魔",
        "道心破碎/一蹶不振",
        "斩断尘缘/太上忘情",
        "以杀证道/杀心成魔",
        "守护之道/为爱成神",
        "逍遥之道/游戏人间",
        "霸道/王道/皇道",
        "“苟”道/稳健之道",
        "“情”道/“无情”道",
        "“剑”心/“刀”心",
        "“赤诚”/“赤子”之心",
        "“问心”/“道心”考验",
        "“顿悟”/“醍醐灌顶”",
        "“瓶颈”/“关隘”",
        "“念头通达”",
        "“知行合一”",
        "“破而后立”",
        "“执念”/“心结”",
        "“道”可道，非常“道”",
      ],
    },
    世界交互: {
      世界交互: [
        "“玩家”/“第四天灾”降临",
        "世界融合/位面战争",
        "“主神”/“系统”发布任务",
        "“天道”/“世界意识”的干预",
        "“高维生物”/“古神”的注视",
        "“时间旅行者”/“重生者”改变历史",
        "“聊天群”/“论坛”连接诸天万界",
        "“直播”/“录像”功能",
        "“NPC”的觉醒",
        "“世界”的“版本更新”/“资料片”",
        "“GM”/“管理员”的权限",
        "“BUG”/“漏洞”的利用",
        "“好感度”/“声望”解锁隐藏剧情",
        "“成就”/“称号”系统",
        "“排行榜”/“天梯”",
        "“副本”/“秘境”的开启与关闭",
        "“世界BOSS”/“野外首领”",
        "“安全区”/“PVP区域”",
        "“阵营”/“国家”战争",
        "“删号”/“洗点”",
      ],
    },
    信息获取: {
      信息获取: [
        "搜魂术/读心术",
        "天机推演/占卜未来",
        "“百晓生”/“天机阁”的情报",
        "酒馆/茶楼的传闻",
        "上古遗迹的壁画/石刻",
        "血脉/传承记忆",
        "“系统”/“老爷爷”的指引",
        "“敌人”/“俘虏”的拷问",
        "“书籍”/“玉简”的记载",
        "“卧底”/“间谍”的情报",
        "“梦境”/“预言”",
        "“拍卖会”/“黑市”",
        "“灵魂”交流",
        "“历史”回溯",
        "“网络”/“灵网”搜索",
        "“吟游诗人”/“说书人”",
        "“悬赏令”/“通缉令”",
        "“地图”/“星图”",
        "“直觉”/“灵感”",
        "“偷听”/“偷看”",
      ],
    },
    机缘与风险: {
      机缘与风险: [
        "福祸相依，机遇与危险并存",
        "“禁地”/“绝地”中的大机缘",
        "“传承”考验，九死一生",
        "“天材地宝”有强大“守护兽”",
        "“神器”/“魔器”会“择主”/“反噬”",
        "“顿悟”时容易被“打扰”/“偷袭”",
        "“夺舍”与“反夺舍”",
        "“修炼禁术”的“副作用”",
        "“泄露天机”会遭“天谴”",
        "“气运”太盛会遭人“嫉妒”/“暗算”",
        "“越级挑战”的“风险”与“收益”",
        "“心魔劫”/“天劫”的难度",
        "“红颜”是“祸水”还是“助力”",
        "“信任”的“背叛”风险",
        "“捷径”往往通向“深渊”",
        "“好奇心”害死猫",
        "“贪婪”是原罪",
        "“选择”比“努力”更重要",
        "“情报”的“真伪”",
        -"“主角”也可能会“死”",
      ],
    },
    成长与代价: {
      成长与代价: [
        "获得力量，失去人性/情感",
        "修为越高，越是“孤独”",
        "为了守护，不得不“杀戮”",
        "为了复仇，变成了自己讨厌的人",
        "每一次“成长”都伴随着“失去”",
        "“天赋”是“恩赐”也是“诅咒”",
        "“长生”的“寂寞”与“无聊”",
        "“知晓未来”的“痛苦”",
        "“力量”的“失控”",
        "“责任”的“沉重”",
        "“自由”的“代价”",
        "“谎言”的“重量”",
        "“选择”的“悔恨”",
        "“背叛”的“伤痕”",
        "“牺牲”的“意义”",
        "“守护”的“疲惫”",
        "“强大”后的“空虚”",
        "“天真”的“逝去”",
        "“成熟”的“标志”",
        "“活着”本身就是一种“修行”",
      ],
    },
    特殊设定: {
      特殊设定: [
        "“颜值”就是战斗力",
        "“名字”具有力量，不可轻易示人",
        "“情绪”会影响“天气”/“法则”",
        "“说谎”会受到“惩罚”",
        "“死亡”可以“存档”/“读档”",
        "“修炼”需要“氪金”/“充值”",
        "“世界”是一个“游戏”，有“GM”和“玩家”",
        "“文字”可以“创造”现实",
        "“影子”是另一个“自己”",
        "“梦境”是另一个“真实”的世界",
        "“性别”可以“切换”",
        "“时间”是“货币”",
        "“颜色”代表“等级”/“力量”",
        "“音乐”/“舞蹈”是“战斗”方式",
        "“做饭”/“种田”可以“成神”",
        "“吐槽”/“玩梗”可以增加“修为”",
        "“运气”可以“修炼”/“掠夺”",
        "“系统”会“傲娇”/“腹黑”/“坑爹”",
        "“旁白”/“作者”会亲自下场",
        "这是一个“读者”可以“互动”的世界",
      ],
    },

    宏观博弈: {
      宏观博弈: [
        "王朝/帝国之间的合纵连横",
        "正道与魔道的千年战争",
        "上界对下界的“收割”与“扶持”",
        "不同种族/文明的生存空间之战",
        "“天道”/“世界意识”与“穿越者”/“变数”的博弈",
        "“旧神”与“新神”的信仰之争",
        "“修仙文明”与“科技文明”的冲突",
        "“本土势力”与“域外天魔”的对抗",
        "一个巨大“阴谋”下的各方反应",
        "“预言”/“天命”的引导与反抗",
        "“资源”/“领地”的争夺",
        "“道统”/“传承”之争",
        "“飞升”名额的争夺",
        "“世界末日”前的不同选择",
        "“主角”与“反派”的气运之争",
        "“旧时代”与“新时代”的交替",
        "“精英”与“大众”的对立",
        "“和平”与“战争”的抉择",
        "“保守”与“革新”的斗争",
        "“作者”与“读者”的“斗智斗勇”",
      ],
    },
    终极目标: {
      终极目标: [
        "破碎虚空，飞升上界",
        "超脱轮回，永恒自在",
        "成为世界之主/创世神",
        "复活所有死去的人，创造一个完美世界",
        "找到回家的路",
        "揭开世界的终极秘密",
        "杀死“天道”/“系统”/“作者”",
        "与爱人归隐，不问世事",
        "建立一个理想中的“乌托邦”",
        "将自己的“道”传遍诸天万界",
        "探索宇宙的尽头",
        "为了“活着”而“活着”",
        "没有目标，随波逐流",
        "成为一个“传说”/“神话”",
        "弥补所有的“遗憾”",
        "让自己的“名字”响彻万界",
        "守护自己所珍视的一切",
        "享受“过程”，不在乎“结果”",
        "找到“自己”存在的“意义”",
        "故事永不“完结”",
      ],
    },
  };

  // 内-置世界设定元素池
  const worldElementPool = {
    世界基调: {
      世界基调: [
        "杀伐果断",
        "黑暗诡谲",
        "仙风道骨",
        "废土朋克",
        "轻松日常",
        "热血王道",
        "搞笑吐槽",
        "悬疑惊悚",
        "末日求生",
        "赛博江湖",
        "蒸汽奇幻",
        "克系恐怖",
        "高武江湖",
        "低魔权谋",
        "星际史诗",
        "校园异能",
        "历史架空",
        "美食治愈",
        "灵异复苏",
        "幕后黑手",
      ],
    },
    核心能量: {
      核心能量: [
        "天地灵气",
        "魔能",
        "元气",
        "星辰之力",
        "混沌之气",
        "信仰之力",
        "气血之力",
        "精神力",
        "妖力",
        "核能",
        "以太",
        "灵能",
        "暗能量",
        "生命力",
        "法则之力",
        "源质",
        "神力",
        "怨气",
        "数据流",
        "以太粒子",
      ],
    },
    修炼体系: {
      修炼体系: [
        "炼气-筑基-金丹-元婴",
        "斗者-斗师-大斗师-斗王",
        "魔法学徒-法师-大法师-法神",
        "基因锁一阶-二阶-三阶-四阶",
        "武魂觉醒-魂士-魂师-大魂师",
        "锻体-炼神-返虚-合道",
        "卡牌见习-青铜-白银-黄金",
        "异能F级-E级-D级-C级",
        "骑士侍从-见习骑士-正式骑士-大骑士",
        "念能力-开发-强化-具现",
        "蛊师-蛊士-蛊王-蛊尊",
        "修真百艺（炼丹/炼器/阵法）",
        "言出法随",
        "香火成神道",
        "机械飞升",
        "血脉进化",
        "内功外功",
        "灵根/天赋/体质",
        "功德成圣",
        "心魔劫/天劫",
      ],
    },
    世界层级: {
      世界层级: [
        "小千世界",
        "中千世界",
        "大千世界",
        "唯一真界",
        "诸天万界",
        "位面宇宙",
        "神国/魔域",
        "洞天福地",
        "破碎星界",
        "高维时空",
        "低维世界",
        "梦境世界",
        "心象世界",
        "赛博空间",
        "时间长河",
        "归墟之地",
        "英灵殿",
        "无尽深渊",
        "九重天",
        "平行宇宙",
      ],
    },
    天道法则: {
      天道法则: [
        "弱肉强食",
        "等价交换",
        "天道无情，视万物为刍狗",
        "功德成圣",
        "众生念力塑造现实",
        "气运之子/天命主角",
        "大道五十，天衍四九",
        "末法时代，法则不显",
        "灵气复苏，法则重现",
        "天道有缺，需生灵弥补",
        "杀戮证道",
        "无情道/有情道",
        "因果报应，丝毫不爽",
        "世界即将重启/格式化",
        "天道被人为操控",
        "法则具象化（可掠夺）",
        "世界升格/降格",
        "穿越者/重生者扰乱天机",
        "大道争锋",
        "万物皆可成精",
      ],
    },
    历史背景: {
      历史背景: [
        "上古大战之后，传承断绝",
        "仙魔大战，延续万年",
        "末法时代，修行者绝迹",
        "灵气复苏，神话再临",
        "星际开拓时代",
        "王朝末年，天下大乱",
        "上古文明遗迹被发现",
        "异世界入侵/融合",
        "神明陨落，信徒争夺神格",
        "智械叛乱之后",
        "大灾变后的废土世界",
        "和平年代下的暗流涌动",
        "刚刚经历过一次世界重置",
        "主角所在的家族曾是第一世家",
        "世界被迷雾笼罩",
        "古神在低语",
        "轮回百世",
        "黄金时代",
        "黑铁时代",
        "英雄时代",
      ],
    },
    地理风貌: {
      地理风貌: [
        "悬浮仙山/天空之城",
        "无尽血海/熔岩之海",
        "九幽魔渊/无光之域",
        "赛博朋克都市",
        "远古文明遗迹群",
        "巨兽骸骨上建立的城市",
        "通天巨塔/世界树",
        "时空错乱的扭曲森林",
        "倒悬的金字塔",
        "冰封万里的极北之地",
        "万里黄沙的死亡沙漠",
        "机关遍布的地下城",
        "由梦境构成的国度",
        "元素界域（火元素界等）",
        "被迷雾笼罩的岛屿",
        "生长着金属植物的平原",
        "时间流速不同的秘境",
        "连接诸天的万界商铺",
        "流淌着星辰的银河",
        "破碎的大陆板块",
      ],
    },
    主要种族: {
      主要种族: [
        "人族",
        "妖族",
        "魔族",
        "神族",
        "龙族",
        "精灵族",
        "矮人族",
        "兽人族",
        "亡灵/不死族",
        "机械/构装生命",
        "元素生命",
        "天生仙灵",
        "星空巨兽",
        "域外天魔",
        "羽人/翼人",
        "海族/娜迦",
        "虫族",
        "古神后裔",
        "半神/神裔",
        "穿越者",
      ],
    },
    社会结构: {
      社会结构: [
        "宗门林立，强者为尊",
        "皇权至上，官僚体系",
        "家族世家，血脉为王",
        "联邦议会，民主投票",
        "财阀掌控，金钱帝国",
        "神权统治，教廷至高",
        "城邦联盟，各自为政",
        "部落制度，图腾崇拜",
        "师徒传承，隐世门派",
        "学院都市，学术至上",
        "军政府，铁血统治",
        "无政府主义，混乱之地",
        "蜂巢意识，集体至上",
        "赛博格社区",
        "地下黑市/灰色地带",
        "冒险者公会",
        "杀手组织",
        "佣兵团",
        "跨位面商会",
        "革命军/反抗组织",
      ],
    },
    上古遗留: {
      上古遗留: [
        "破碎的仙器/神器",
        "远古大能的传承洞府",
        "陨落神明的神格",
        "史前超文明的科技遗迹",
        "针对特定血脉的诅咒",
        "上古封印之地",
        "失落的古国/古城",
        "记载着禁忌知识的石板",
        "天地初开的第一缕光",
        "被放逐的古神",
        "世界树的碎片",
        "上古异种的血脉",
        "轮回印记",
        "天书/无字碑",
        "第一代智械的核心代码",
        "时空道标",
        "创世神器的蓝图",
        "被遗忘的英雄传说",
        "远古的誓言",
        "灭世武器",
      ],
    },
    特殊灾劫: {
      特殊灾劫: [
        "天人五衰",
        "无量量劫",
        "域外天魔入侵",
        "维度坍塌/世界末日",
        "智械叛乱/天网觉醒",
        "丧尸/异形瘟疫",
        "古神复苏/邪神低语",
        "法则暴走/魔法灾变",
        "大过滤器（文明自我毁灭）",
        "黑暗森林打击",
        "世界被高维生物“降维”",
        "血月/红月降临",
        "诡异复苏",
        "深渊凝视",
        "时间线被污染",
        "主角的心魔/天劫",
        "气运反噬",
        "文明飞升失败",
        "灵气枯竭",
        "被高维存在观测",
      ],
    },
    资源分布: {
      资源分布: [
        "灵石/魔晶矿脉",
        "洞天福地/龙脉节点",
        "天材地宝/神药产地",
        "气运汇聚之地",
        "信息黑市/知识库",
        "上古战场/遗迹",
        "高能量反应堆",
        "信仰源/教堂",
        "灵魂之河",
        "生命之泉",
        "世界本源",
        "时空裂缝",
        "高价值悬赏目标",
        "独特的怪物材料",
        "可再生的法则碎片",
        "文明图书馆",
        "拍卖行",
        "黑市",
        "禁地",
        "神之墓地",
      ],
    },
    势力阵营: {
      势力阵营: [
        "正道联盟",
        "魔道巨擘",
        "邪派妖人",
        "散修圣地",
        "跨位面商会",
        "杀手王朝",
        "上古传承的隐世家族",
        "守护世界的古老组织",
        "追求真理的法师塔",
        "星际帝国军团",
        "反抗暴政的革命军",
        "中立的冒险者公会",
        "臭名昭著的星盗团",
        "掌控经济的财阀",
        "神明在人间的教会",
        "远古异兽族群",
        "人工智能共同体",
        "穿越者同乡会",
        "不可名状的秘密结社",
        "主角光环",
      ],
    },
    交通方式: {
      交通方式: [
        "御剑飞行",
        "传送阵",
        "星际战舰/曲速引擎",
        "虚空渡船",
        "骑乘神兽/飞行坐骑",
        "土遁/水遁等五行遁术",
        "缩地成寸/空间跳跃",
        "蒸汽列车/飞艇",
        "个人飞行翼/机甲",
        "梦境穿梭",
        "通过影子移动",
        "虫洞/星门",
        "灵魂投影",
        "筋斗云",
        "地下铁路网络",
        "风火轮",
        "维度行走",
        "星际高速公路",
        "召唤兽代步",
        "肉身横渡虚空",
      ],
    },
    信息媒介: {
      信息媒介: [
        "玉简/神念",
        "飞剑传书",
        "心灵网络/灵网",
        "量子通讯/超光速通讯",
        "天机推演/占卜",
        "遍布世界的“天眼”系统",
        "血脉传承记忆",
        "托梦/入梦之术",
        "共生体信息共享",
        "刻在灵魂上的烙印",
        "回溯时光读取信息",
        "“作者”的旁白",
        "世界公告/系统提示",
        "吟游诗人传唱的故事",
        "上古壁画",
        "信鸽/灵宠",
        "加密魔法通讯",
        "星际互联网",
        "预言石板",
        "命运之书",
      ],
    },
    禁忌知识: {
      禁忌知识: [
        "成神/超脱之法",
        "世界的真实面目（牢笼/梦境）",
        "召唤/控制古神的方法",
        "弑神兵器的制造图",
        "重置/毁灭世界的方法",
        "复活死者的禁术",
        "通往高维的路径",
        "创造生命的技术",
        "控制时间/因果律的法门",
        "天道/系统/主神的漏洞",
        "上古文明灭绝的真相",
        "主角的真实来历",
        "最强功法/最强科技",
        "不可名状存在的真名",
        "统治世界的阴谋",
        "所有人的命运剧本",
        "如何窃取他人气运",
        "灵魂的本质",
        "最深层的魔法/法则",
        "如何杀死“作者”",
      ],
    },
    生命形态: {
      生命形态: [
        "血肉生灵",
        "能量生命",
        "法则化身",
        "概念神",
        "信息/数据生命",
        "机械/硅基生命",
        "植物/真菌生命",
        "夺舍/寄生生命",
        "分身/集群意识",
        "不死生物/亡灵",
        "天生神圣/仙胎",
        "以情绪为食的生物",
        "活着的星球/星系",
        "维度生物（二维/四维）",
        "模因/思想病毒",
        "由信念诞生的“英灵”",
        "没有实体的“幽灵”",
        "可以吞噬进化的“利维坦”",
        "人造人/克隆人",
        "从故事中走出的“角色”",
      ],
    },
    经济体系: {
      经济体系: [
        "以物易物/一般等价物",
        "灵石/魔晶本位制",
        "功勋/贡献点体系",
        "星际信用点",
        "信仰之力作为硬通货",
        "灵魂交易",
        "知识/信息作为货币",
        "时间作为货币",
        "气运/命运可交易",
        "国家发行的法定货币",
        "奴隶贸易",
        "丹药/装备作为硬通货",
        "资源星球的开采权",
        "垄断商会发行的票据",
        "系统/主神空间积分",
        "基因序列",
        "算力",
        "领地",
        "寿命",
        "好感度",
      ],
    },
    神话源头: {
      神话源头: [
        "盘古开天/鸿蒙初判",
        "泰坦/巨神创世",
        "克苏鲁/外神播种",
        "超级程序员“创世”",
        "宇宙大爆炸后自然演化",
        "上一个纪元的幸存者所创",
        "至高存在的梦境",
        "由无数世界融合而成",
        "是一本“书”或“剧本”",
        "是某个大能的体内世界",
        "由失败的实验所导致",
        "为了“飞升”而建造的“舟”",
        "流放罪人的“监狱”",
        "为了养蛊而创造的“斗兽场”",
        "由众生意念汇聚而成",
        "逃离“真实”的虚拟世界",
        "神明们的游戏场",
        "一个巨大的阴谋",
        "没有源头，无限循环",
        "主角自己创造的",
      ],
    },
    世界边界: {
      世界边界: [
        "天地胎膜/世界壁",
        "无尽的混沌虚空",
        "高维时空屏障",
        "数据构成的“防火墙”",
        "无法逾越的“叹息之墙”",
        "时空风暴带",
        "被法则扭曲的放逐之地",
        "归墟/世界尽头",
        "被强大存在守护的“天门”",
        "物理上的星球边缘",
        "被“迷雾”笼罩的未知区域",
        "需要特殊“钥匙”才能打开的门",
        "宇宙的边缘",
        "更高层“天界”的入口",
        "通往“地狱”的深渊",
        "被大阵封锁的区域",
        "故事的“结局”",
        "作者设定的背景板",
        "服务器的硬件极限",
        "你的想象力边界",
      ],
    },
  };

  // 内置剧情设定元素池
  const plotElementPool = {
    开局金手指: {
      开局金手指: [
        "废柴流的戒指老爷爷",
        "重生自带未来记忆",
        "签到/打卡系统",
        "神豪系统，开局一个亿",
        "绝世功法/神级天赋",
        "绑定国运/全族希望",
        "高人灌顶/传承记忆",
        "神级选择系统",
        "无限复活/读档能力",
        "可以看到他人好感度/属性面板",
        "捡到上古神器/神兽",
        "拥有一个掌中世界/洞天福地",
        "被绝世美女/大佬看中",
        "能听懂万物语言",
        "点石成金/炼假成真",
        "一键满级/自动修炼",
        "穿越成反派/炮灰，自带剧本",
        "模拟器系统，预知未来",
        "分身/投影万界",
        "聊天群系统，连接诸天大佬",
      ],
    },
    主角身份: {
      主角身份: [
        "被退婚的废柴少爷",
        "宗门/家族的扫地杂役",
        "亡国皇子/公主",
        "天赋绝顶却无法修炼的“废物”",
        "从地球穿越的普通人",
        "大能转世/仙帝重生",
        "被当做炉鼎/祭品的工具人",
        "身怀魔种/不详血脉的孤儿",
        "隐世家族的唯一传人",
        "从边陲小城走出的猎户之子",
        "一个没有感情的杀手",
        "被系统选中的“天命之子”",
        "反派组织的底层成员",
        "一个即将被献祭的“伪神”",
        "从未来穿越回来的救世主",
        "一个靠“吃”变强的特殊体质",
        "一个女扮男装的将军/皇帝",
        "一个只想“苟”到天荒地老的怂包",
        "一个“平平无奇”的大师兄",
        "一个失忆的绝世强者",
      ],
    },
    核心矛盾: {
      核心矛盾: [
        "退婚之辱，三年之约",
        "为家族/宗门复仇",
        "打破阶级/命运的枷锁",
        "守护珍视之人/故乡",
        "探索世界真相/父母失踪之谜",
        "与天道/命运抗争",
        "成为世界最强/天下第一",
        "阻止世界毁灭/末日降临",
        "寻找回家的路",
        "向曾经背叛自己的人复仇",
        "统一大陆/诸天万界",
        "收集神器/法则碎片",
        "治好自己的绝症/诅咒",
        "在残酷世界中活下去",
        "成为幕后黑手，操纵一切",
        "传播信仰，收集香火成神",
        "为种族/文明的延续而战",
        "推翻腐朽的统治",
        "追求永生/超脱",
        "完成系统的终极任务",
      ],
    },
    反派类型: {
      反派类型: [
        "主角的“龙傲天”式同辈/情敌",
        "伪善的宗门长老/正道领袖",
        "贪婪的帝国皇帝/贵族",
        "想要夺舍主角的魔道老祖",
        "视众生为蝼蚁的古神/天道",
        "来自高维/异界的侵略者",
        "主角曾经最信任的兄弟/师尊",
        "拥有“系统”的另一个穿越者",
        "一个为了复活爱人而灭世的疯子",
        "一个坚信自己是“正义”的理想主义者",
        "主角的“心魔”/黑暗面",
        "一个以玩弄人心为乐的阴谋家",
        "一个只想让世界回归“无”的虚无主义者",
        "一个庞大的、无面目的利益集团",
        "主角家族的宿敌",
        "上一个纪元的“天命之子”",
        "被主角“无意”间伤害过的小人物",
        "一个疯狂的科学家/炼金术士",
        "一个想要“净化”世界的种族主义者",
        "“作者”本人",
      ],
    },
    剧情转折: {
      剧情转折: [
        "被最信任的人背叛",
        "发现自己只是一个棋子",
        "一直尊敬的师长是最大反派",
        "自己所在的“正道”才是真正的邪恶",
        "世界是虚假的/一个牢笼",
        "主角的能力/金手指有巨大副作用",
        "心爱的女人/兄弟为救自己而死",
        "主角被迫“入魔”/与世界为敌",
        "发现自己才是真正的“反派”",
        "自己的家族/宗门被一夜灭门",
        "千辛万苦得到的神器是假的/诅咒之物",
        "主角失忆/功力尽失",
        "一个不起眼的小人物成为最终BOSS",
        "时间线重置/回到过去",
        "发现有另一个“自己”存在",
        "自己的“金手指”被夺走",
        "被迫与最好的朋友/爱人对决",
        "发现父母/亲人并未死亡",
        "世界观颠覆（如灵气复苏/末法时代）",
        "主角的孩子/后代从未来穿越回来",
      ],
    },
    女角类型: {
      女角类型: [
        "高冷圣女/冰山女神",
        "刁蛮任性的魔教妖女",
        "温柔体贴的青梅竹马",
        "成熟妩媚的御姐/师尊",
        "呆萌可爱的天然呆师妹",
        "病娇/占有欲极强的“妹妹”",
        "一心向道、太上忘情的女剑仙",
        "权倾朝野的女帝/女王",
        "来自敌对势力的卧底/间谍",
        "默默守护主角的“影子”",
        "活了万年的腹黑老怪物（萝莉体型）",
        "英姿飒爽的女将军/女武神",
        "能看透人心的妖狐/精怪",
        "富可敌国的商会大小姐",
        "一个只想利用主角的“坏女人”",
        "被主角从奴隶市场救下的兽耳娘",
        "主角的“系统”化身",
        "一个普通的、善良的凡人女子",
        "与主角有婚约的“未婚妻”",
        "主角的母亲/长辈",
      ],
    },
    关键配角: {
      关键配角: [
        "一个贪财但讲义气的胖子兄弟",
        "一个战力超群但沉默寡言的追随者",
        "一个玩世不恭、游戏人间的“剑仙”",
        "一个身份神秘、无所不知的“说书人”",
        "一个总在关键时刻出现的老乞丐/扫地僧",
        "一个亦正亦邪、亦敌亦友的“魔头”",
        "一个为了主角可以牺牲一切的“舔狗”",
        "一个负责搞笑和活跃气氛的“活宝”",
        "一个擅长炼丹/炼器的技术宅",
        "一个精通阵法/推演天机的“神算子”",
        "一个忠心耿耿的老仆人/管家",
        "一个被主角“嘴炮”收服的强大妖兽",
        "一个来自上界的“接引使者”",
        "一个掌握着巨大情报网络的“百晓生”",
        "一个为了主角而死的“白月光”",
        "一个总给主角“送经验”的憨憨反派",
        "一个代表“天道”的执法者",
        "一个主角的“复制品”/克隆体",
        "一个来自未来的“警告者”",
        "一个教会主角“爱”与“恨”的凡人",
      ],
    },
    世界事件: {
      世界事件: [
        "绝世神兵/功法出世，天下震动",
        "上古秘境/大能洞府开启",
        "百年/千年一度的宗门大比/天骄战",
        "魔道/邪派大举入侵",
        "王朝更替，天下大乱",
        "天降异象，灵气潮汐",
        "异族/外敌入侵",
        "有史以来最大的拍卖会",
        "某个大人物的寿宴/婚宴",
        "某个禁地/封印出现松动",
        "“天榜”/“潜龙榜”等榜单更新",
        "瘟疫/天灾降临",
        "一个全新的修炼体系被发现",
        "一个失落的古文明被发掘",
        "两个超级势力的全面战争",
        "“天道”降下旨意/任务",
        "一个横跨大陆的巨大阴谋被揭露",
        "世界开始与其他世界融合",
        "一个“神”陨落了",
        "主角的身份被公之于众",
      ],
    },
    冒险地点: {
      冒险地点: [
        "万妖山脉/十万大山",
        "无尽之海/归墟之地",
        "上古战场/神魔陵园",
        "九幽魔渊/血色地狱",
        "天空之城/悬浮仙岛",
        "龙潭虎穴/龙之墓地",
        "被诅咒的“鬼城”/废都",
        "时空错乱的“迷雾森林”",
        "通往上界的“登天路”",
        "一个凡人国度的皇宫/市井",
        "一个巨大的地下迷宫/地城",
        "一个完全由机械构成的“城市”",
        "一个只有女人的“女儿国”",
        "一个时间流速不同的“秘境”",
        "一个可以实现任何愿望的“许愿池”",
        "一个关押着无数魔头的“镇魔塔”",
        "一个传说中的“桃花源”/隐世之地",
        "一个巨大的、跨位面的“黑市”",
        "一个可以“回溯”历史的遗迹",
        "一个名为“地球”的低魔世界",
      ],
    },
    奇遇形式: {
      奇遇形式: [
        "坠崖不死，必有奇遇",
        "被敌人追杀，误入禁地",
        "在路边摊买到上古神器",
        "做了一个预知未来的梦",
        "血脉觉醒/二次穿越",
        "被一道雷劈中，打通任督二脉",
        "英雄救美，获得美女/大佬青睐",
        "破解一盘残局/一首诗，获得传承",
        "无意中吃下/融合了天材地宝",
        "帮助了一个落魄的老爷爷，结果他是神",
        "滴血认主，激活了某个物品",
        "灵魂出窍，神游太虚",
        "在拍卖会捡漏",
        "挖到前代主角的坟",
        "顿悟/醍醐灌顶",
        "触发了隐藏任务/唯一成就",
        "被仇人废掉修为，结果破而后立",
        "打开了某个神秘的“盒子”",
        "听了一段说书/一首歌，领悟了神通",
        "给“作者”打赏/投票",
      ],
    },
    修炼瓶颈: {
      修炼瓶颈: [
        "心魔入侵/走火入魔",
        "根基不稳，需要重修",
        "缺少关键的丹药/材料",
        "功法有缺陷/不完整",
        "遭遇天劫/人劫",
        "被小人暗算，身中奇毒",
        "气运耗尽/被他人窃取",
        "情劫/为情所困",
        "修炼到了当前世界的“上限”",
        "灵魂受损/神魂不全",
        "血脉/灵根等级不够",
        "缺少名师指点",
        "被仇家追杀，没有时间修炼",
        "功高震主，被势力打压",
        "资源被垄断/抢夺",
        "进入了“末法时代”",
        "被天道/法则所不容",
        "杀戮过多，业力缠身",
        "顿悟的状态被打断",
        "身体产生了抗药性",
      ],
    },
    战斗风格: {
      战斗风格: [
        "越级反杀，扮猪吃虎",
        "底牌尽出，艰难惨胜",
        "一力降十会，绝对碾压",
        "智谋算计，步步为营",
        "依靠法宝/外物取胜",
        "阵法困敌，慢慢磨死",
        "召唤流/人海战术",
        "嘴炮说死/气死对手",
        "同归于尽/自爆打法",
        "猥琐发育，背后偷袭",
        "控制流，让对手无法出手",
        "毒功/诅咒，防不胜防",
        "体修/武道，拳拳到肉",
        "剑修/刀客，一击毙命",
        "音律/精神攻击",
        "临时突破，反败为胜",
        "与宠物/伙伴合体战斗",
        "利用天时地利",
        "先让对手三招",
        "打不过就跑，君子报仇十年不晚",
      ],
    },
    "装备/法宝": {
      "装备/法宝": [
        "可成长型本命法宝",
        "拥有器灵/智能AI的神器",
        "成套的套装/组合神器",
        "一次性的、威力巨大的底牌（符箓/禁器）",
        "领域类法宝（展开一个对自己有利的空间）",
        "洞天法宝/掌中世界",
        "可以改变容貌/气息的伪装道具",
        "专门用于逃跑/传送的法宝",
        "可以吸收/反弹伤害的防御法宝",
        "专门针对灵魂/神魂的武器",
        "因果律武器/概念性武器",
        "可以复制他人能力/功法的法宝",
        "辅助修炼/炼丹/炼器的道具",
        "一个巨大的“要塞”/“战舰”",
        "一个拥有自我意识的“魔方”",
        "一个可以“存档”的怀表",
        "一件看起来很普通，但有奇效的物品",
        "主角亲手打造的第一件装备",
        "从敌人手中抢来的战利品",
        "系统奖励的“新手大礼包”",
      ],
    },
    "组织/势力": {
      "组织/势力": [
        "主角创建的“晓”组织/天庭",
        "一个由穿越者组成的“同乡会”",
        "一个以“搞事”为己任的秘密结社",
        "一个遍布诸天的“万界商会”",
        "一个只收女子的“仙女宫”",
        "一个由炼器师/炼丹师组成的“技术联盟”",
        "一个维护世界平衡的“守护者”组织",
        "一个专门刺杀“天命之子”的“逆天盟”",
        "一个由妖兽/非人生物组成的“万妖国”",
        "一个追求“机械飞升”的改造人组织",
        "一个由无数“系统”持有者组成的联盟",
        "一个信奉“克苏鲁”的邪教",
        "一个由“玩家”组成的公会",
        "一个史前文明的“遗族”",
        "一个由“反派”们组成的“救世联盟”",
        "一个掌控着世界经济命脉的“财阀”",
        "一个情报能力天下第一的“天机阁”",
        "一个由主角的“后宫”组成的势力",
        "一个专门收留“失败者”的组织",
        "一个致力于“推翻作者”的联盟",
      ],
    },
    故事节奏: {
      故事节奏: [
        "快速升级，爽点密集",
        "慢热铺垫，后期爆发",
        "一波三折，反转不断",
        "轻松日常与热血战斗交织",
        "多线叙事，草蛇灰线",
        "公路片模式，游历四方",
        "种田/经营模式，稳步发展",
        "幕后黑手流，暗中布局",
        "学院/宗门内的成长故事",
        "王朝争霸/星际战争",
        "一个副本接一个副本",
        "解谜/探索为主线",
        "以一场巨大的“阴谋”贯穿始终",
        "以“复仇”为唯一目标",
        "以“守护”为核心",
        "以“回家”为最终目的",
        "以“无敌”的姿态游戏人间",
        "以“苟”为主，能不出手就不出手",
        "以“直播”/“演戏”的方式进行",
        "以“美食”/“治愈”为主题",
      ],
    },
    结局走向: {
      结局走向: [
        "主角成为世界最强，破碎虚空",
        "主角牺牲自己，拯救了世界",
        "主角与后宫们过上了幸福的生活",
        "主角成为新的“天道”/“主神”",
        "主角发现一切都是梦/一场空",
        "主角回到地球，过上普通人的生活",
        "主角带着亲友，开辟了一个新世界",
        "主角输了，世界被毁灭/反派获胜",
        "主角成为了自己最讨厌的人",
        "这是一个开放式结局，留下无尽遐想",
        "主角杀上九天，干翻了“作者”",
        "主角放弃一切，与爱人归隐山林",
        "主角发现还有更广阔的世界，故事未完待续",
        "主角被困在时间的循环里",
        "主角成为了一个传说/神话",
        "主角的后代开启了新的故事",
        "主角发现自己是虚拟人物，并接受了它",
        "主角与最终BOSS同归于尽",
        "主角修复了世界的“BUG”",
        "主角终于“苟”到了最后",
      ],
    },
    情感关系: {
      情感关系: [
        "一生一世一双人",
        "后宫佳丽三千人",
        "相爱相杀，亦敌亦友",
        "白月光与朱砂痣",
        "先婚后爱/契约情侣",
        "养成系/师徒恋",
        "我把你当兄弟，你却想泡我",
        "跨越种族/生死的爱恋",
        "单相思/求而不得",
        "欢喜冤家，不打不相识",
        "青梅竹马，天降系",
        "为了利益而结合的政治联姻",
        "我爱的人不爱我，爱我的人我不爱",
        "全员单箭头，修罗场",
        "无CP，一心搞事业",
        "兄弟情/姐妹情比金坚",
        "与自己的“影子”/“分身”相爱",
        "与“系统”/“AI”的恋爱",
        "人鬼情未了",
        "我绿了我自己",
      ],
    },
    世界观设定: {
      世界观设定: [
        "高武/仙侠世界",
        "西幻/魔法世界",
        "废土/末日世界",
        "赛博朋克/星际世界",
        "克苏鲁/诡异世界",
        "主神空间/无限流",
        "历史架空/王朝争霸",
        "都市异能/灵气复苏",
        "游戏异界/玩家入侵",
        "美食/治愈系世界",
        "幕后黑手/迪化流",
        "搞笑/吐槽役世界",
        "悬疑/解谜世界",
        "种田/经营世界",
        "洪荒/神话世界",
        "武魂/卡牌世界",
        "蛊/巫术世界",
        "蒸汽朋克/工业革命",
        "校园/青春世界",
        "一个由“书”构成的世界",
      ],
    },
    叙事诡计: {
      叙事诡计: [
        "不可靠的第一人称叙事",
        "主角其实是反派",
        "叙述性诡计，性别/身份误导",
        "故事开头即是结尾",
        "双线/多线叙事，最后汇合揭示真相",
        "梦境与现实的交错",
        "书中书/剧中剧结构",
        "主角有人格分裂",
        "关键线索隐藏在不起眼的细节中",
        "利用读者的刻板印象进行误导",
        "时间线被打乱叙述",
        "故事中的“预言”其实是“计划”",
        "主角所做的一切都是徒劳",
        "一个角色扮演多个身份",
        "“死者”才是真正的凶手",
        "整个故事是一个“思想实验”",
        "利用“系统提示”/“旁白”误导读者",
        "主角的能力是“欺骗读者”",
        "反派的视角才是“真实”的",
        "作者跳出来和角色对话",
      ],
    },
    核心主题: {
      核心主题: [
        "我命由我不由天",
        "能力越大，责任越大",
        "有舍才有得",
        "人类的赞歌是勇气的赞歌",
        "星星之火可以燎原",
        "不要温和地走进那个良夜",
        "屠龙者终成恶龙",
        "当你凝视深渊时，深渊也在凝视你",
        "历史是一个轮回",
        "天下大势，合久必分，分久必合",
        "放下与执着",
        "真实与虚假",
        "秩序与自由",
        "个人与集体",
        "爱与牺牲",
        "成长与代价",
        "人性本善/本恶",
        "科技是天使还是魔鬼",
        "什么是“活着”",
        "什么是“我”",
      ],
    },
  };

  // -----------------------------------------------------------------
  // 2. SillyTavern API 封装
  // -----------------------------------------------------------------
  const delay = (ms) => new Promise((res) => setTimeout(res, ms));

  async function waitForTavernHelper(retries = 20, interval = 500) {
    for (let i = 0; i < retries; i++) {
      if (
        window.TavernHelper &&
        typeof window.TavernHelper.getLorebooks === "function" &&
        window.toastr
      ) {
        console.log(
          `[${extensionName}] TavernHelper API and Toastr are available.`,
        );
        return window.TavernHelper;
      }
      await delay(interval);
    }
    throw new Error(
      "TavernHelper API or Toastr is not available. Please ensure JS-Slash-Runner extension is installed and enabled.",
    );
  }

  async function createLorebookEntry(bookName, entryData) {
    if (!tavernHelperApi) tavernHelperApi = await waitForTavernHelper();
    return await tavernHelperApi.createLorebookEntry(bookName, entryData);
  }

  async function getLorebooks() {
    if (!tavernHelperApi) tavernHelperApi = await waitForTavernHelper();
    return await tavernHelperApi.getLorebooks();
  }

  async function getLorebookEntries(bookName) {
    if (!tavernHelperApi) tavernHelperApi = await waitForTavernHelper();
    return await tavernHelperApi.getLorebookEntries(bookName);
  }

  async function createLorebook(bookName) {
    if (!tavernHelperApi) tavernHelperApi = await waitForTavernHelper();
    const bookExists = (await tavernHelperApi.getLorebooks()).includes(
      bookName,
    );
    if (!bookExists) {
      await tavernHelperApi.createLorebook(bookName);
    }
  }

  // -----------------------------------------------------------------
  // 3. 辅助函数
  // -----------------------------------------------------------------
  function extractAndCleanJson(rawText) {
    if (!rawText || typeof rawText !== "string") return "";

    // 1. 从Markdown代码块或原始文本中提取JSON字符串
    const match = rawText.match(/```json\s*([\s\S]*?)\s*```/);
    let jsonString = match ? match[1] : rawText;
    if (!match) {
      const firstBracket = jsonString.indexOf("[");
      const lastBracket = jsonString.lastIndexOf("]");
      if (firstBracket !== -1 && lastBracket > firstBracket) {
        jsonString = jsonString.substring(firstBracket, lastBracket + 1);
      }
    }
    jsonString = jsonString.trim();

    // 2. "治愈"JSON：通过正则表达式查找所有 "content": "..." 结构
    // 并仅在其内部的字符串值中，将未转义的换行符和回车符替换为转义形式
    const healedJsonString = jsonString.replace(
      /"content":\s*"((?:[^"\\]|\\.)*)"/g,
      (match, contentValue) => {
        // 对捕获到的 content 字符串值进行处理
        const escapedContent = contentValue
          .replace(/\n/g, "\\n") // 转义换行符
          .replace(/\r/g, "\\r"); // 转义回车符
        // 重构 "content": "..." 部分
        return `"content": "${escapedContent}"`;
      },
    );

    return healedJsonString;
  }

  function sanitizeEntry(entry) {
    // 定义世界书条目允许的字段白名单
    const allowedKeys = [
      "key",
      "keys",
      "comment",
      "content",
      "type",
      "position",
      "depth",
      "prevent_recursion",
      "order",
      "uid",
    ];
    const sanitized = {};
    // 遍历白名单，只保留entry中存在的、且在白名单内的字段
    for (const key of allowedKeys) {
      if (Object.hasOwn(entry, key)) {
        sanitized[key] = entry[key];
      }
    }
    return sanitized;
  }

  function setActiveStage(stageNumber) {
    projectState.currentStage = stageNumber;
    // 更新阶段内容显示
    $(".wbg-stage").removeClass("active");
    $(`#stage-${stageNumber}`).addClass("active");
    // 更新阶段选择器按钮高亮
    $(".stage-button").removeClass("active");
    $(`.stage-button[data-stage="${stageNumber}"]`).addClass("active");
  }

  // 新增：使元素可拖动的函数
  function makeDraggable(element) {
    let isDragging = false;
    let offsetX, offsetY;
    // 用于区分点击和拖拽的标志
    // mousedown后，如果mousemove移动了超过一个阈值，就判定为拖拽
    let dragThreshold = 5;
    let startX, startY;

    element.on("mousedown", function (e) {
      isDragging = false; // 重置拖拽状态
      startX = e.clientX;
      startY = e.clientY;

      // 确保使用的是 left/top 定位
      if (!this.style.left || !this.style.top) {
        const rect = this.getBoundingClientRect();
        this.style.left = `${rect.left}px`;
        this.style.top = `${rect.top}px`;
        this.style.right = ""; // 清除 right/bottom
        this.style.bottom = "";
      }

      offsetX = e.clientX - this.getBoundingClientRect().left;
      offsetY = e.clientY - this.getBoundingClientRect().top;

      // 绑定移动和松开事件到 document
      $(document).on("mousemove.wbg-drag", function (moveEvent) {
        // 检查是否超过拖拽阈值
        if (
          !isDragging &&
          (Math.abs(moveEvent.clientX - startX) > dragThreshold ||
            Math.abs(moveEvent.clientY - startY) > dragThreshold)
        ) {
          isDragging = true;
          element.css("cursor", "grabbing");
        }

        if (isDragging) {
          let newX = moveEvent.clientX - offsetX;
          let newY = moveEvent.clientY - offsetY;

          // 限制在视窗内移动
          const viewportWidth = $(window).width();
          const viewportHeight = $(window).height();
          const elementWidth = element.outerWidth();
          const elementHeight = element.outerHeight();

          newX = Math.max(0, Math.min(newX, viewportWidth - elementWidth));
          newY = Math.max(0, Math.min(newY, viewportHeight - elementHeight));

          element.css({
            top: newY + "px",
            left: newX + "px",
          });
        }
      });

      $(document).on("mouseup.wbg-drag", function () {
        // 解绑事件
        $(document).off("mousemove.wbg-drag");
        $(document).off("mouseup.wbg-drag");
        if (isDragging) {
          element.css("cursor", "grab");
        }
      });

      // 阻止默认行为，如文本选择
      e.preventDefault();
    });

    // 返回一个函数，用于在 click 事件中检查是否发生了拖拽
    return {
      wasDragged: () => isDragging,
    };
  }

  function populateAdvancedOptions() {
    const container = $("#advanced-options-content");
    container.empty();
    for (const category in worldElementPool) {
      const subcategories = worldElementPool[category];
      for (const subcategory in subcategories) {
        const options = subcategories[subcategory];
        const selectId = `adv-opt-${category}-${subcategory}`.replace(
          /\s/g,
          "-",
        );
        let selectHtml = `<div class="advanced-option-item"><label for="${selectId}">${subcategory}:</label><select id="${selectId}" data-category="${subcategory}"><option value="">(AI自由发挥)</option>`;
        options.forEach((option) => {
          selectHtml += `<option value="${option}">${option}</option>`;
        });
        selectHtml += "</select></div>";
        container.append(selectHtml);
      }
    }
  }

  function handleRandomizeAll() {
    $("#advanced-options-content select").each(function () {
      const options = $(this).find("option");
      const randomIndex = Math.floor(Math.random() * (options.length - 1)) + 1;
      $(this).prop("selectedIndex", randomIndex);
    });
    toastr.info("已为所有高级设定随机选择完毕！");
  }

  function populatePlotOptions() {
    const container = $("#plot-options-content");
    container.empty();
    for (const category in plotElementPool) {
      const subcategories = plotElementPool[category];
      for (const subcategory in subcategories) {
        const options = subcategories[subcategory];
        const selectId = `plot-opt-${category}-${subcategory}`.replace(
          /\s/g,
          "-",
        );
        let selectHtml = `<div class="advanced-option-item"><label for="${selectId}">${subcategory}:</label><select id="${selectId}" data-category="${subcategory}"><option value="">(AI自由发挥)</option>`;
        options.forEach((option) => {
          selectHtml += `<option value="${option}">${option}</option>`;
        });
        selectHtml += "</select></div>";
        container.append(selectHtml);
      }
    }
  }

  function handleRandomizePlotOptions() {
    $("#plot-options-content select").each(function () {
      const options = $(this).find("option");
      const randomIndex = Math.floor(Math.random() * (options.length - 1)) + 1;
      $(this).prop("selectedIndex", randomIndex);
    });
    toastr.info("已为所有剧情设定随机选择完毕！");
  }

  function populateDetailOptions() {
    const container = $("#detail-options-content");
    container.empty();
    for (const category in detailElementPool) {
      const subcategories = detailElementPool[category];
      for (const subcategory in subcategories) {
        const options = subcategories[subcategory];
        const selectId = `detail-opt-${category}-${subcategory}`.replace(
          /\s/g,
          "-",
        );
        let selectHtml = `<div class="advanced-option-item"><label for="${selectId}">${subcategory}:</label><select id="${selectId}" data-category="${subcategory}"><option value="">(AI自由发挥)</option>`;
        options.forEach((option) => {
          selectHtml += `<option value="${option}">${option}</option>`;
        });
        selectHtml += "</select></div>";
        container.append(selectHtml);
      }
    }
  }

  function handleRandomizeDetailOptions() {
    $("#detail-options-content select").each(function () {
      const options = $(this).find("option");
      const randomIndex = Math.floor(Math.random() * (options.length - 1)) + 1;
      $(this).prop("selectedIndex", randomIndex);
    });
    toastr.info("已为所有细节深化选项随机选择完毕！");
  }

  function populateMechanicsOptions() {
    const container = $("#mechanics-options-content");
    container.empty();
    for (const category in mechanicsElementPool) {
      const subcategories = mechanicsElementPool[category];
      for (const subcategory in subcategories) {
        const options = subcategories[subcategory];
        const selectId = `mech-opt-${category}-${subcategory}`.replace(
          /\s/g,
          "-",
        );
        let selectHtml = `<div class="advanced-option-item"><label for="${selectId}">${subcategory}:</label><select id="${selectId}" data-category="${subcategory}"><option value="">(AI自由发挥)</option>`;
        options.forEach((option) => {
          selectHtml += `<option value="${option}">${option}</option>`;
        });
        selectHtml += "</select></div>";
        container.append(selectHtml);
      }
    }
  }

  function handleRandomizeMechanicsOptions() {
    $("#mechanics-options-content select").each(function () {
      const options = $(this).find("option");
      const randomIndex = Math.floor(Math.random() * (options.length - 1)) + 1;
      $(this).prop("selectedIndex", randomIndex);
    });
    toastr.info("已为所有游戏机制选项随机选择完毕！");
  }

  // -----------------------------------------------------------------
  // 4. 核心逻辑
  // -----------------------------------------------------------------
  async function handleGenerateFoundation() {
    const bookName = $("#bookName").val().trim();
    if (!bookName) {
      toastr.warning("在开始前，请为你的世界命名！");
      return;
    }
    projectState.bookName = bookName;
    localStorage.setItem("wbg_lastBookName", bookName);

    const coreTheme = $("#coreTheme").val().trim();
    let advancedOptionsString = "";
    $("#advanced-options-content select").each(function () {
      const selectedValue = $(this).val();
      if (selectedValue) {
        const categoryName = $(this).data("category");
        advancedOptionsString += `- ${categoryName}: ${selectedValue}\\n`;
      }
    });

    if (!advancedOptionsString && !coreTheme) {
      toastr.warning("请至少选择一个“高级设定”或输入一个“核心主题”！");
      return;
    }

    toastr.info("正在构建提示词并注入思想钢印，请稍候...");
    $("#generateFoundationButton").prop("disabled", true).text("生成中...");
    $("#uploadFoundationButton").prop("disabled", true);
    $("#aiResponseTextArea").val("AI正在思考...");

    try {
      const [unrestrictPrompt, writingGuide, promptTemplate] =
        await Promise.all([
          $.get(`${extensionFolderPath}/unrestrict-prompt.txt`),
          $.get(`${extensionFolderPath}/writing-guide.txt`),
          $.get(`${extensionFolderPath}/generator-prompt.txt`),
        ]);
      const combinedPromptTemplate = `${unrestrictPrompt}\n\n${writingGuide}\n\n${promptTemplate}`;
      let finalPrompt = combinedPromptTemplate
        .replace(/{{bookName}}/g, bookName)
        .replace(/{{advancedOptions}}/g, advancedOptionsString || "无")
        .replace(/{{coreTheme}}/g, coreTheme || "无");

      console.log(
        `[${extensionName}] Final prompt for Foundation:`,
        finalPrompt,
      );
      const rawAiResponse = await tavernHelperApi.generateRaw({
        ordered_prompts: [{ role: "user", content: finalPrompt }],
        max_new_tokens: 8192,
      });

      projectState.generatedContent = rawAiResponse;
      $("#aiResponseTextArea").val(rawAiResponse);
      $("#uploadFoundationButton").prop("disabled", false);
      toastr.success("AI已生成回复，请检查内容后决定是否上传。");
    } catch (error) {
      console.error(`[${extensionName}] 生成世界基石失败:`, error);
      $("#aiResponseTextArea").val(`生成失败: ${error.message}`);
      toastr.error(`操作失败: ${error.message}`);
    } finally {
      $("#generateFoundationButton")
        .prop("disabled", false)
        .text("生成/补充内容");
    }
  }

  async function handleUploadFoundation() {
    const bookName = projectState.bookName;
    const rawAiResponse = projectState.generatedContent;
    if (!bookName || !rawAiResponse) {
      toastr.warning("没有可上传的内容。");
      return;
    }

    $("#uploadFoundationButton").prop("disabled", true).text("上传中...");
    try {
      const cleanedJsonString = extractAndCleanJson(rawAiResponse);
      const newGeneratedEntries = JSON.parse(cleanedJsonString);
      if (!Array.isArray(newGeneratedEntries))
        throw new Error("AI返回的数据解析后不是一个JSON数组。");

      await createLorebook(bookName);
      for (const entry of newGeneratedEntries) {
        const sanitizedEntry = sanitizeEntry(entry);
        await createLorebookEntry(bookName, sanitizedEntry);
      }

      toastr.success(
        `成功上传 ${newGeneratedEntries.length} 个新条目到世界书 '${bookName}'！`,
      );
      $("#aiResponseTextArea").val(
        "上传成功！您可以继续补充内容，或通过上方按钮切换到下一阶段。",
      );
      setActiveStage(2); // 自动切换到下一阶段
    } catch (error) {
      console.error(`[${extensionName}] 上传世界内容失败:`, error);
      toastr.error(`上传失败: ${error.message}`);
    } finally {
      $("#uploadFoundationButton").prop("disabled", false).text("上传至世界书");
    }
  }

  async function handleGenerateOutline() {
    const bookName = projectState.bookName;
    if (!bookName) {
      toastr.error("项目状态丢失，请返回第一步重新开始。");
      return;
    }

    const plotElements = $("#plotElements").val().trim();
    let plotOptionsString = "";
    $("#plot-options-content select").each(function () {
      const selectedValue = $(this).val();
      if (selectedValue) {
        const categoryName = $(this).data("category");
        plotOptionsString += `- ${categoryName}: ${selectedValue}\\n`;
      }
    });

    if (!plotOptionsString && !plotElements) {
      toastr.warning("请至少选择一个“剧情设定”或输入一些“剧情元素”！");
      return;
    }

    toastr.info("正在获取现有世界观并注入思想钢印，请稍候...");
    $("#generateOutlineButton").prop("disabled", true).text("生成中...");
    $("#uploadOutlineButton").prop("disabled", true);
    $("#aiResponseTextArea-stage2").val("AI正在思考...");

    try {
      const [unrestrictPrompt, writingGuide, promptTemplate, currentEntries] =
        await Promise.all([
          $.get(`${extensionFolderPath}/unrestrict-prompt.txt`),
          $.get(`${extensionFolderPath}/writing-guide.txt`),
          $.get(`${extensionFolderPath}/story-prompt.txt`),
          getLorebookEntries(bookName),
        ]);
      const combinedPromptTemplate = `${unrestrictPrompt}\n\n${writingGuide}\n\n${promptTemplate}`;
      const currentBookContent = JSON.stringify(currentEntries, null, 2);
      let finalPrompt = combinedPromptTemplate
        .replace(/{{world_book_entries}}/g, currentBookContent)
        .replace(/{{plot_elements}}/g, plotElements || "无")
        .replace(/{{plotOptions}}/g, plotOptionsString || "无");

      console.log(`[${extensionName}] Final prompt for Outline:`, finalPrompt);
      const rawAiResponse = await tavernHelperApi.generateRaw({
        ordered_prompts: [{ role: "user", content: finalPrompt }],
        max_new_tokens: 8192,
      });

      projectState.generatedOutlineContent = rawAiResponse;
      $("#aiResponseTextArea-stage2").val(rawAiResponse);
      $("#uploadOutlineButton").prop("disabled", false);
      toastr.success("AI已生成剧情大纲，请检查后决定是否上传。");
    } catch (error) {
      console.error(`[${extensionName}] 生成剧情大纲失败:`, error);
      $("#aiResponseTextArea-stage2").val(`生成失败: ${error.message}`);
      toastr.error(`操作失败: ${error.message}`);
    } finally {
      $("#generateOutlineButton").prop("disabled", false).text("生成/补充剧情");
    }
  }

  async function handleUploadOutline() {
    const bookName = projectState.bookName;
    const rawAiResponse = projectState.generatedOutlineContent;
    if (!bookName || !rawAiResponse) {
      toastr.warning("没有可上传的剧情内容。");
      return;
    }

    $("#uploadOutlineButton").prop("disabled", true).text("上传中...");
    try {
      const cleanedJsonString = extractAndCleanJson(rawAiResponse);
      const newGeneratedEntries = JSON.parse(cleanedJsonString);
      if (!Array.isArray(newGeneratedEntries))
        throw new Error("AI返回的数据解析后不是一个JSON数组。");

      for (const entry of newGeneratedEntries) {
        const sanitizedEntry = sanitizeEntry(entry);
        await createLorebookEntry(bookName, sanitizedEntry);
      }

      toastr.success(
        `成功将 ${newGeneratedEntries.length} 个剧情条目添加到世界书 '${bookName}'！`,
      );
      $("#aiResponseTextArea-stage2").val(
        "上传成功！您可以继续补充剧情，或通过上方按钮切换到下一阶段。",
      );
      setActiveStage(3); // 自动切换到下一阶段
    } catch (error) {
      console.error(`[${extensionName}] 上传剧情内容失败:`, error);
      toastr.error(`上传失败: ${error.message}`);
    } finally {
      $("#uploadOutlineButton").prop("disabled", false).text("上传至世界书");
    }
  }

  async function handleGenerateDetail() {
    const bookName = projectState.bookName;
    if (!bookName) {
      toastr.error("项目状态丢失，请返回第一步重新开始。");
      return;
    }

    const detailElements = $("#detailElements").val().trim();
    let detailOptionsString = "";
    $("#detail-options-content select").each(function () {
      const selectedValue = $(this).val();
      if (selectedValue) {
        const categoryName = $(this).data("category");
        detailOptionsString += `- ${categoryName}: ${selectedValue}\\n`;
      }
    });

    if (!detailOptionsString && !detailElements) {
      toastr.warning("请至少选择一个“细节深化”选项或输入一些“核心主题”！");
      return;
    }

    toastr.info("正在获取现有世界观并注入思想钢印，请稍候...");
    $("#generateDetailButton").prop("disabled", true).text("生成中...");
    $("#uploadDetailButton").prop("disabled", true);
    $("#aiResponseTextArea-stage3").val("AI正在思考...");

    try {
      const [unrestrictPrompt, writingGuide, promptTemplate, currentEntries] =
        await Promise.all([
          $.get(`${extensionFolderPath}/unrestrict-prompt.txt`),
          $.get(`${extensionFolderPath}/writing-guide.txt`),
          $.get(`${extensionFolderPath}/detail-prompt.txt`),
          getLorebookEntries(bookName),
        ]);
      const combinedPromptTemplate = `${unrestrictPrompt}\n\n${writingGuide}\n\n${promptTemplate}`;
      const currentBookContent = JSON.stringify(currentEntries, null, 2);
      let finalPrompt = combinedPromptTemplate
        .replace(/{{world_book_entries}}/g, currentBookContent)
        .replace(/{{detail_elements}}/g, detailElements || "无")
        .replace(/{{detailOptions}}/g, detailOptionsString || "无");

      console.log(`[${extensionName}] Final prompt for Detail:`, finalPrompt);
      const rawAiResponse = await tavernHelperApi.generateRaw({
        ordered_prompts: [{ role: "user", content: finalPrompt }],
        max_new_tokens: 8192,
      });

      projectState.generatedDetailContent = rawAiResponse;
      $("#aiResponseTextArea-stage3").val(rawAiResponse);
      $("#uploadDetailButton").prop("disabled", false);
      toastr.success("AI已生成细节内容，请检查后决定是否上传。");
    } catch (error) {
      console.error(`[${extensionName}] 生成细节内容失败:`, error);
      $("#aiResponseTextArea-stage3").val(`生成失败: ${error.message}`);
      toastr.error(`操作失败: ${error.message}`);
    } finally {
      $("#generateDetailButton").prop("disabled", false).text("生成/补充细节");
    }
  }

  async function handleUploadDetail() {
    const bookName = projectState.bookName;
    const rawAiResponse = projectState.generatedDetailContent;
    if (!bookName || !rawAiResponse) {
      toastr.warning("没有可上传的细节内容。");
      return;
    }

    $("#uploadDetailButton").prop("disabled", true).text("上传中...");
    try {
      const cleanedJsonString = extractAndCleanJson(rawAiResponse);
      const newGeneratedEntries = JSON.parse(cleanedJsonString);
      if (!Array.isArray(newGeneratedEntries))
        throw new Error("AI返回的数据解析后不是一个JSON数组。");

      for (const entry of newGeneratedEntries) {
        const sanitizedEntry = sanitizeEntry(entry);
        await createLorebookEntry(bookName, sanitizedEntry);
      }

      toastr.success(
        `成功将 ${newGeneratedEntries.length} 个细节条目添加到世界书 '${bookName}'！`,
      );
      $("#aiResponseTextArea-stage3").val(
        "上传成功！您可以继续补充细节，或通过上方按钮切换到下一阶段。",
      );
      setActiveStage(4); // 自动切换到下一阶段
    } catch (error) {
      console.error(`[${extensionName}] 上传细节内容失败:`, error);
      toastr.error(`上传失败: ${error.message}`);
    } finally {
      $("#uploadDetailButton").prop("disabled", false).text("上传至世界书");
    }
  }

  async function handleGenerateMechanics() {
    const bookName = projectState.bookName;
    if (!bookName) {
      toastr.error("项目状态丢失，请返回第一步重新开始。");
      return;
    }

    // 修正：使用与其他阶段一致的、通过ID获取textarea内容的方式
    const mechanicsElements = $("#mechanicsElements").val().trim();
    let mechanicsOptionsString = "";
    // 修正：使用与其他阶段一致的、更简洁的select元素选择器
    $("#mechanics-options-content select").each(function () {
      const selectedValue = $(this).val();
      if (selectedValue) {
        const categoryName = $(this).data("category");
        mechanicsOptionsString += `- ${categoryName}: ${selectedValue}\\n`;
      }
    });

    if (!mechanicsOptionsString && !mechanicsElements) {
      toastr.warning("请至少选择一个“游戏机制”选项或输入一些“核心主题”！");
      return;
    }

    toastr.info("正在获取现有世界观并注入思想钢印，请稍候...");
    $("#generateMechanicsButton").prop("disabled", true).text("生成中...");
    $("#uploadMechanicsButton").prop("disabled", true);
    $("#aiResponseTextArea-stage4").val("AI正在思考...");

    try {
      const [unrestrictPrompt, writingGuide, promptTemplate, currentEntries] =
        await Promise.all([
          $.get(`${extensionFolderPath}/unrestrict-prompt.txt`),
          $.get(`${extensionFolderPath}/writing-guide.txt`),
          $.get(`${extensionFolderPath}/mechanics-prompt.txt`),
          getLorebookEntries(bookName),
        ]);
      const combinedPromptTemplate = `${unrestrictPrompt}\n\n${writingGuide}\n\n${promptTemplate}`;
      const currentBookContent = JSON.stringify(currentEntries, null, 2);
      let finalPrompt = combinedPromptTemplate
        .replace(/{{world_book_entries}}/g, currentBookContent)
        .replace(/{{mechanics_elements}}/g, mechanicsElements || "无")
        .replace(/{{mechanicsOptions}}/g, mechanicsOptionsString || "无");

      console.log(
        `[${extensionName}] Final prompt for Mechanics:`,
        finalPrompt,
      );
      const rawAiResponse = await tavernHelperApi.generateRaw({
        ordered_prompts: [{ role: "user", content: finalPrompt }],
        max_new_tokens: 8192,
      });

      projectState.generatedMechanicsContent = rawAiResponse;
      $("#aiResponseTextArea-stage4").val(rawAiResponse);
      $("#uploadMechanicsButton").prop("disabled", false);
      toastr.success("AI已生成游戏机制，请检查后决定是否上传。");
    } catch (error) {
      console.error(`[${extensionName}] 生成游戏机制失败:`, error);
      $("#aiResponseTextArea-stage4").val(`生成失败: ${error.message}`);
      toastr.error(`操作失败: ${error.message}`);
    } finally {
      $("#generateMechanicsButton")
        .prop("disabled", false)
        .text("设计/补充机制");
    }
  }

  async function handleUploadMechanics() {
    const bookName = projectState.bookName;
    const rawAiResponse = projectState.generatedMechanicsContent;
    if (!bookName || !rawAiResponse) {
      toastr.warning("没有可上传的游戏机制内容。");
      return;
    }

    $("#uploadMechanicsButton").prop("disabled", true).text("上传中...");
    try {
      const cleanedJsonString = extractAndCleanJson(rawAiResponse);
      const newGeneratedEntries = JSON.parse(cleanedJsonString);
      if (!Array.isArray(newGeneratedEntries))
        throw new Error("AI返回的数据解析后不是一个JSON数组。");

      for (const entry of newGeneratedEntries) {
        const sanitizedEntry = sanitizeEntry(entry);
        await createLorebookEntry(bookName, sanitizedEntry);
      }

      toastr.success(
        `成功将 ${newGeneratedEntries.length} 个游戏机制条目添加到世界书 '${bookName}'！`,
      );
      $("#aiResponseTextArea-stage4").val("上传成功！您的世界书已基本完成！");
    } catch (error) {
      console.error(`[${extensionName}] 上传游戏机制失败:`, error);
      toastr.error(`上传失败: ${error.message}`);
    } finally {
      $("#uploadMechanicsButton").prop("disabled", false).text("上传至世界书");
    }
  }

  // -----------------------------------------------------------------
  // 5. 欢迎页面与初始化流程
  // -----------------------------------------------------------------
  async function populateBooksDropdown() {
    try {
      const books = await getLorebooks();
      const dropdown = $("#existingBooksDropdown");
      dropdown
        .empty()
        .append('<option value="">选择一个已有的世界书...</option>');
      books.forEach((book) =>
        dropdown.append($("<option></option>").val(book).text(book)),
      );
    } catch (error) {
      console.error(
        `[${extensionName}] Failed to populate lorebooks dropdown:`,
        error,
      );
      toastr.error("无法加载世界书列表。");
    }
  }

  function handleStartNew() {
    Object.assign(projectState, {
      bookName: "",
      generatedContent: null,
      generatedOutlineContent: null,
    });
    $("#bookName").val("").prop("disabled", false);
    $("#wbg-landing-page").hide();
    $("#wbg-generator-page").show();
    setActiveStage(1);
  }

  async function handleContinue() {
    const selectedBook = $("#existingBooksDropdown").val();
    if (!selectedBook) {
      toastr.warning("请先选择一个世界书！");
      return;
    }
    localStorage.setItem("wbg_lastBookName", selectedBook);
    toastr.info(`正在加载世界书 '${selectedBook}'...`);
    try {
      await getLorebookEntries(selectedBook);
      const stage = 4; // For now, let's just assume we can always edit any stage. A more complex logic can be added later.
      projectState.bookName = selectedBook;
      $("#bookName").val(selectedBook).prop("disabled", true);
      $("#wbg-landing-page").hide();
      $("#wbg-generator-page").show();
      setActiveStage(stage);
      toastr.success(`已加载 '${selectedBook}'，您可以对任意阶段进行创作。`);
    } catch (error) {
      console.error(`[${extensionName}] Failed to continue project:`, error);
      toastr.error(`加载项目失败: ${error.message}`);
    }
  }

  async function handleQuickContinue() {
    const lastBookName = localStorage.getItem("wbg_lastBookName");
    if (!lastBookName) {
      toastr.warning("没有找到上次的项目记录。");
      return;
    }
    toastr.info(`正在快速加载上次的项目 '${lastBookName}'...`);
    try {
      await getLorebookEntries(lastBookName);
      const stage = 4; // 默认可以编辑所有阶段
      projectState.bookName = lastBookName;
      $("#bookName").val(lastBookName).prop("disabled", true);
      $("#wbg-landing-page").hide();
      $("#wbg-generator-page").show();
      setActiveStage(stage);
      toastr.success(`已加载 '${lastBookName}'，您可以对任意阶段进行创作。`);
      $("#wbg-popup-overlay").css("display", "flex"); // 确保弹窗可见
    } catch (error) {
      console.error(
        `[${extensionName}] Failed to quick continue project:`,
        error,
      );
      toastr.error(`快速加载项目失败: ${error.message}`);
    }
  }

  async function initializeExtension() {
    $("head").append(
      `<link rel="stylesheet" type="text/css" href="${extensionFolderPath}/style.css?v=${Date.now()}">`,
    );
    try {
      const [settingsHtml, popupHtml] = await Promise.all([
        $.get(`${extensionFolderPath}/settings.html`),
        $.get(`${extensionFolderPath}/popup.html?v=${Date.now()}`),
      ]);
      $("#extensions_settings2").append(settingsHtml);
      $("body").append(popupHtml);

      // 在HTML加载后，初始化更新器
      const updater = new WBGUpdater();
      await updater.init();
    } catch (error) {
      console.error(`[${extensionName}] Failed to load HTML files.`, error);
      return;
    }

    $("body").append(
      '<div id="wbg-floating-button" title="世界书生成器 (可拖动)"><i class="fa-solid fa-book-bookmark"></i></div>',
    );

    const fab = $("#wbg-floating-button");
    const draggable = makeDraggable(fab);

    fab.on("click", () => {
      // 如果是拖拽事件，则不执行点击逻辑
      if (draggable.wasDragged()) {
        return;
      }
      const lastBookName = localStorage.getItem("wbg_lastBookName");
      if (lastBookName) {
        $("#quickContinueButton").show().find("span").text(lastBookName);
      } else {
        $("#quickContinueButton").hide();
      }
      $("#wbg-generator-page").hide();
      $("#wbg-landing-page").show();
      $("#wbg-popup-overlay").css("display", "flex");
      populateBooksDropdown();
    });

    // 修正：使用 .wbg-header .close-button 确保只选择页头内的关闭按钮
    $("#wbg-popup-close-button").on("click", () =>
      $("#wbg-popup-overlay").hide(),
    );

    $("#wbg-popup").on("click", (e) => e.stopPropagation());

    // 欢迎页面按钮
    $("#startNewButton").on("click", handleStartNew);
    $("#continueButton").on("click", handleContinue);
    $("#quickContinueButton").on("click", handleQuickContinue);

    // 阶段选择器
    $("#wbg-stage-selector").on("click", ".stage-button", function () {
      const stage = $(this).data("stage");
      setActiveStage(stage);
    });

    // 阶段一按钮
    $("#randomizeAllButton").on("click", handleRandomizeAll);
    $("#generateFoundationButton").on("click", handleGenerateFoundation);
    $("#uploadFoundationButton").on("click", handleUploadFoundation);

    // 阶段二按钮
    $("#randomizePlotButton").on("click", handleRandomizePlotOptions);
    $("#generateOutlineButton").on("click", handleGenerateOutline);
    $("#uploadOutlineButton").on("click", handleUploadOutline);

    // 阶段三按钮
    $("#randomizeDetailButton").on("click", handleRandomizeDetailOptions);
    $("#generateDetailButton").on("click", handleGenerateDetail);
    $("#uploadDetailButton").on("click", handleUploadDetail);

    // 阶段四按钮
    $("#randomizeMechanicsButton").on("click", handleRandomizeMechanicsOptions);
    $("#generateMechanicsButton").on("click", handleGenerateMechanics);
    $("#uploadMechanicsButton").on("click", handleUploadMechanics);

    // 初始化高级选项
    populateAdvancedOptions();
    populatePlotOptions();
    populateDetailOptions();
    populateMechanicsOptions();
  }

  // 运行初始化
  try {
    tavernHelperApi = await waitForTavernHelper();
    await initializeExtension();
    console.log(`[${extensionName}] 扩展已成功加载并重构。`);
  } catch (error) {
    console.error(`[${extensionName}] 扩展初始化失败:`, error);
    toastr.error(`扩展 '${extensionName}' 初始化失败: ${error.message}`);
  }
});
